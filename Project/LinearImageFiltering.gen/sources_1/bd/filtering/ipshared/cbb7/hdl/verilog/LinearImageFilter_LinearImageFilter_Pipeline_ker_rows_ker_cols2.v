// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LinearImageFilter_LinearImageFilter_Pipeline_ker_rows_ker_cols2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_AWVALID,
        m_axi_kernel_AWREADY,
        m_axi_kernel_AWADDR,
        m_axi_kernel_AWID,
        m_axi_kernel_AWLEN,
        m_axi_kernel_AWSIZE,
        m_axi_kernel_AWBURST,
        m_axi_kernel_AWLOCK,
        m_axi_kernel_AWCACHE,
        m_axi_kernel_AWPROT,
        m_axi_kernel_AWQOS,
        m_axi_kernel_AWREGION,
        m_axi_kernel_AWUSER,
        m_axi_kernel_WVALID,
        m_axi_kernel_WREADY,
        m_axi_kernel_WDATA,
        m_axi_kernel_WSTRB,
        m_axi_kernel_WLAST,
        m_axi_kernel_WID,
        m_axi_kernel_WUSER,
        m_axi_kernel_ARVALID,
        m_axi_kernel_ARREADY,
        m_axi_kernel_ARADDR,
        m_axi_kernel_ARID,
        m_axi_kernel_ARLEN,
        m_axi_kernel_ARSIZE,
        m_axi_kernel_ARBURST,
        m_axi_kernel_ARLOCK,
        m_axi_kernel_ARCACHE,
        m_axi_kernel_ARPROT,
        m_axi_kernel_ARQOS,
        m_axi_kernel_ARREGION,
        m_axi_kernel_ARUSER,
        m_axi_kernel_RVALID,
        m_axi_kernel_RREADY,
        m_axi_kernel_RDATA,
        m_axi_kernel_RLAST,
        m_axi_kernel_RID,
        m_axi_kernel_RFIFONUM,
        m_axi_kernel_RUSER,
        m_axi_kernel_RRESP,
        m_axi_kernel_BVALID,
        m_axi_kernel_BREADY,
        m_axi_kernel_BRESP,
        m_axi_kernel_BID,
        m_axi_kernel_BUSER,
        m_axi_image_in_AWVALID,
        m_axi_image_in_AWREADY,
        m_axi_image_in_AWADDR,
        m_axi_image_in_AWID,
        m_axi_image_in_AWLEN,
        m_axi_image_in_AWSIZE,
        m_axi_image_in_AWBURST,
        m_axi_image_in_AWLOCK,
        m_axi_image_in_AWCACHE,
        m_axi_image_in_AWPROT,
        m_axi_image_in_AWQOS,
        m_axi_image_in_AWREGION,
        m_axi_image_in_AWUSER,
        m_axi_image_in_WVALID,
        m_axi_image_in_WREADY,
        m_axi_image_in_WDATA,
        m_axi_image_in_WSTRB,
        m_axi_image_in_WLAST,
        m_axi_image_in_WID,
        m_axi_image_in_WUSER,
        m_axi_image_in_ARVALID,
        m_axi_image_in_ARREADY,
        m_axi_image_in_ARADDR,
        m_axi_image_in_ARID,
        m_axi_image_in_ARLEN,
        m_axi_image_in_ARSIZE,
        m_axi_image_in_ARBURST,
        m_axi_image_in_ARLOCK,
        m_axi_image_in_ARCACHE,
        m_axi_image_in_ARPROT,
        m_axi_image_in_ARQOS,
        m_axi_image_in_ARREGION,
        m_axi_image_in_ARUSER,
        m_axi_image_in_RVALID,
        m_axi_image_in_RREADY,
        m_axi_image_in_RDATA,
        m_axi_image_in_RLAST,
        m_axi_image_in_RID,
        m_axi_image_in_RFIFONUM,
        m_axi_image_in_RUSER,
        m_axi_image_in_RRESP,
        m_axi_image_in_BVALID,
        m_axi_image_in_BREADY,
        m_axi_image_in_BRESP,
        m_axi_image_in_BID,
        m_axi_image_in_BUSER,
        mul_ln7,
        kernel_dim,
        add_2,
        col_4,
        empty_31,
        rows,
        cols,
        empty,
        image_in_offset,
        kernel_offset,
        sum_7_out,
        sum_7_out_ap_vld,
        grp_Pad_fu_1976_p_din1,
        grp_Pad_fu_1976_p_din2,
        grp_Pad_fu_1976_p_din3,
        grp_Pad_fu_1976_p_din4,
        grp_Pad_fu_1976_p_din5,
        grp_Pad_fu_1976_p_din6,
        grp_Pad_fu_1976_p_din7,
        grp_Pad_fu_1976_p_dout0_0,
        grp_Pad_fu_1976_p_dout0_1,
        grp_Pad_fu_1976_p_dout0_2,
        grp_Pad_fu_1976_p_ce,
        grp_fu_1986_p_din0,
        grp_fu_1986_p_din1,
        grp_fu_1986_p_opcode,
        grp_fu_1986_p_dout0,
        grp_fu_1986_p_ce,
        grp_fu_1990_p_din0,
        grp_fu_1990_p_din1,
        grp_fu_1990_p_dout0,
        grp_fu_1990_p_ce,
        grp_fu_618_p_din0,
        grp_fu_618_p_din1,
        grp_fu_618_p_dout0,
        grp_fu_618_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_AWVALID;
input   m_axi_kernel_AWREADY;
output  [31:0] m_axi_kernel_AWADDR;
output  [0:0] m_axi_kernel_AWID;
output  [31:0] m_axi_kernel_AWLEN;
output  [2:0] m_axi_kernel_AWSIZE;
output  [1:0] m_axi_kernel_AWBURST;
output  [1:0] m_axi_kernel_AWLOCK;
output  [3:0] m_axi_kernel_AWCACHE;
output  [2:0] m_axi_kernel_AWPROT;
output  [3:0] m_axi_kernel_AWQOS;
output  [3:0] m_axi_kernel_AWREGION;
output  [0:0] m_axi_kernel_AWUSER;
output   m_axi_kernel_WVALID;
input   m_axi_kernel_WREADY;
output  [31:0] m_axi_kernel_WDATA;
output  [3:0] m_axi_kernel_WSTRB;
output   m_axi_kernel_WLAST;
output  [0:0] m_axi_kernel_WID;
output  [0:0] m_axi_kernel_WUSER;
output   m_axi_kernel_ARVALID;
input   m_axi_kernel_ARREADY;
output  [31:0] m_axi_kernel_ARADDR;
output  [0:0] m_axi_kernel_ARID;
output  [31:0] m_axi_kernel_ARLEN;
output  [2:0] m_axi_kernel_ARSIZE;
output  [1:0] m_axi_kernel_ARBURST;
output  [1:0] m_axi_kernel_ARLOCK;
output  [3:0] m_axi_kernel_ARCACHE;
output  [2:0] m_axi_kernel_ARPROT;
output  [3:0] m_axi_kernel_ARQOS;
output  [3:0] m_axi_kernel_ARREGION;
output  [0:0] m_axi_kernel_ARUSER;
input   m_axi_kernel_RVALID;
output   m_axi_kernel_RREADY;
input  [31:0] m_axi_kernel_RDATA;
input   m_axi_kernel_RLAST;
input  [0:0] m_axi_kernel_RID;
input  [8:0] m_axi_kernel_RFIFONUM;
input  [0:0] m_axi_kernel_RUSER;
input  [1:0] m_axi_kernel_RRESP;
input   m_axi_kernel_BVALID;
output   m_axi_kernel_BREADY;
input  [1:0] m_axi_kernel_BRESP;
input  [0:0] m_axi_kernel_BID;
input  [0:0] m_axi_kernel_BUSER;
output   m_axi_image_in_AWVALID;
input   m_axi_image_in_AWREADY;
output  [31:0] m_axi_image_in_AWADDR;
output  [0:0] m_axi_image_in_AWID;
output  [31:0] m_axi_image_in_AWLEN;
output  [2:0] m_axi_image_in_AWSIZE;
output  [1:0] m_axi_image_in_AWBURST;
output  [1:0] m_axi_image_in_AWLOCK;
output  [3:0] m_axi_image_in_AWCACHE;
output  [2:0] m_axi_image_in_AWPROT;
output  [3:0] m_axi_image_in_AWQOS;
output  [3:0] m_axi_image_in_AWREGION;
output  [0:0] m_axi_image_in_AWUSER;
output   m_axi_image_in_WVALID;
input   m_axi_image_in_WREADY;
output  [31:0] m_axi_image_in_WDATA;
output  [3:0] m_axi_image_in_WSTRB;
output   m_axi_image_in_WLAST;
output  [0:0] m_axi_image_in_WID;
output  [0:0] m_axi_image_in_WUSER;
output   m_axi_image_in_ARVALID;
input   m_axi_image_in_ARREADY;
output  [31:0] m_axi_image_in_ARADDR;
output  [0:0] m_axi_image_in_ARID;
output  [31:0] m_axi_image_in_ARLEN;
output  [2:0] m_axi_image_in_ARSIZE;
output  [1:0] m_axi_image_in_ARBURST;
output  [1:0] m_axi_image_in_ARLOCK;
output  [3:0] m_axi_image_in_ARCACHE;
output  [2:0] m_axi_image_in_ARPROT;
output  [3:0] m_axi_image_in_ARQOS;
output  [3:0] m_axi_image_in_ARREGION;
output  [0:0] m_axi_image_in_ARUSER;
input   m_axi_image_in_RVALID;
output   m_axi_image_in_RREADY;
input  [31:0] m_axi_image_in_RDATA;
input   m_axi_image_in_RLAST;
input  [0:0] m_axi_image_in_RID;
input  [8:0] m_axi_image_in_RFIFONUM;
input  [0:0] m_axi_image_in_RUSER;
input  [1:0] m_axi_image_in_RRESP;
input   m_axi_image_in_BVALID;
output   m_axi_image_in_BREADY;
input  [1:0] m_axi_image_in_BRESP;
input  [0:0] m_axi_image_in_BID;
input  [0:0] m_axi_image_in_BUSER;
input  [63:0] mul_ln7;
input  [31:0] kernel_dim;
input  [31:0] add_2;
input  [31:0] col_4;
input  [30:0] empty_31;
input  [31:0] rows;
input  [31:0] cols;
input  [2:0] empty;
input  [31:0] image_in_offset;
input  [31:0] kernel_offset;
output  [31:0] sum_7_out;
output   sum_7_out_ap_vld;
output  [31:0] grp_Pad_fu_1976_p_din1;
output  [31:0] grp_Pad_fu_1976_p_din2;
output  [31:0] grp_Pad_fu_1976_p_din3;
output  [31:0] grp_Pad_fu_1976_p_din4;
output  [31:0] grp_Pad_fu_1976_p_din5;
output  [31:0] grp_Pad_fu_1976_p_din6;
output  [2:0] grp_Pad_fu_1976_p_din7;
input  [0:0] grp_Pad_fu_1976_p_dout0_0;
input  [31:0] grp_Pad_fu_1976_p_dout0_1;
input  [31:0] grp_Pad_fu_1976_p_dout0_2;
output   grp_Pad_fu_1976_p_ce;
output  [31:0] grp_fu_1986_p_din0;
output  [31:0] grp_fu_1986_p_din1;
output  [1:0] grp_fu_1986_p_opcode;
input  [31:0] grp_fu_1986_p_dout0;
output   grp_fu_1986_p_ce;
output  [31:0] grp_fu_1990_p_din0;
output  [31:0] grp_fu_1990_p_din1;
input  [31:0] grp_fu_1990_p_dout0;
output   grp_fu_1990_p_ce;
output  [31:0] grp_fu_618_p_din0;
output  [31:0] grp_fu_618_p_din1;
input  [31:0] grp_fu_618_p_dout0;
output   grp_fu_618_p_ce;

reg ap_idle;
reg m_axi_kernel_ARVALID;
reg m_axi_kernel_RREADY;
reg m_axi_image_in_ARVALID;
reg m_axi_image_in_RREADY;
reg sum_7_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_subdone;
reg   [0:0] icmp_ln39_reg_540;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_blk_n_AR;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_2_reg_589;
reg    kernel_blk_n_R;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg   [0:0] tmp_2_reg_589_pp0_iter1_reg;
reg    image_in_blk_n_AR;
reg    image_in_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] tmp_2_reg_589_pp0_iter2_reg;
reg    ap_predicate_op89_readreq_state6;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] p_cast_fu_236_p1;
reg   [31:0] p_cast_reg_535;
wire   [0:0] icmp_ln39_fu_263_p2;
reg    ap_block_state17_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln39_reg_540_pp0_iter1_reg;
reg   [0:0] icmp_ln39_reg_540_pp0_iter2_reg;
reg   [0:0] icmp_ln39_reg_540_pp0_iter3_reg;
wire   [63:0] add_ln39_4_fu_268_p2;
reg   [63:0] add_ln39_4_reg_544;
reg   [31:0] j_load_reg_549;
wire   [0:0] icmp_ln43_fu_280_p2;
reg   [0:0] icmp_ln43_reg_554;
wire  signed [31:0] select_ln39_fu_291_p3;
reg  signed [31:0] select_ln39_reg_559;
wire   [31:0] select_ln24_fu_299_p3;
reg   [31:0] select_ln24_reg_566;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] newRow_3_fu_305_p2;
reg   [31:0] newRow_3_reg_572;
wire   [31:0] newCol_fu_313_p2;
reg   [31:0] newCol_reg_578;
wire   [29:0] trunc_ln55_fu_319_p1;
reg   [29:0] trunc_ln55_reg_584;
reg    ap_block_state9_io;
reg    ap_block_state14_pp0_stage3_iter2;
reg    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] tmp_2_reg_589_pp0_iter3_reg;
reg   [0:0] tmp_2_reg_589_pp0_iter4_reg;
reg  signed [31:0] newRow_reg_593;
wire   [29:0] trunc_ln50_fu_335_p1;
reg   [29:0] trunc_ln50_reg_598;
reg   [29:0] trunc_ln55_s_reg_603;
wire   [29:0] trunc_ln55_12_fu_398_p1;
reg   [29:0] trunc_ln55_12_reg_614;
reg   [29:0] trunc_ln55_11_reg_619;
reg   [31:0] kernel_addr_read_reg_630;
reg   [31:0] image_in_addr_read_reg_635;
wire   [31:0] bitcast_ln55_4_fu_439_p1;
wire   [31:0] bitcast_ln55_5_fu_443_p1;
reg   [31:0] mul21_2_reg_650;
reg   [31:0] sum_6_reg_660;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg    grp_Pad_fu_213_ap_ce;
reg    ap_block_state14_pp0_stage3_iter2_ignore_call14;
reg    ap_block_pp0_stage3_11001_ignoreCallOp71;
wire    ap_block_pp0_stage4_11001_ignoreCallOp75;
wire  signed [31:0] sext_ln55_5_fu_370_p1;
wire  signed [31:0] sext_ln55_4_fu_429_p1;
reg   [31:0] j_fu_106;
wire   [31:0] add_ln43_fu_380_p2;
wire    ap_loop_init;
reg   [31:0] i_fu_110;
reg   [63:0] indvar_flatten41_fu_114;
reg   [31:0] sum_fu_118;
reg   [31:0] ap_sig_allocacmp_sum_load_6;
reg    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage2;
reg  signed [31:0] grp_fu_232_p0;
reg  signed [31:0] grp_fu_232_p1;
wire  signed [31:0] icmp_ln43_fu_280_p1;
wire   [31:0] add_ln39_fu_285_p2;
wire   [31:0] sub_ln48_fu_309_p2;
wire    ap_block_pp0_stage4;
wire   [29:0] trunc_ln55_14_fu_339_p1;
wire   [29:0] add_ln55_10_fu_342_p2;
wire   [31:0] shl_ln55_5_fu_347_p3;
wire   [31:0] add_ln55_11_fu_355_p2;
wire   [29:0] add_ln55_8_fu_402_p2;
wire   [31:0] shl_ln55_4_fu_406_p3;
wire   [31:0] add_ln55_9_fu_414_p2;
reg    grp_fu_224_ce;
reg    grp_fu_228_ce;
reg    grp_fu_232_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage1;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
reg    ap_done_pending_pp0;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_106 = 32'd0;
#0 i_fu_110 = 32'd0;
#0 indvar_flatten41_fu_114 = 64'd0;
#0 sum_fu_118 = 32'd0;
#0 ap_done_reg = 1'b0;
end

LinearImageFilter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_110 <= 32'd0;
        end else if (((icmp_ln39_reg_540 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_110 <= select_ln39_reg_559;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten41_fu_114 <= 64'd0;
        end else if (((icmp_ln39_reg_540 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten41_fu_114 <= add_ln39_4_reg_544;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_106 <= 32'd0;
        end else if (((icmp_ln39_reg_540 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_106 <= add_ln43_fu_380_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_fu_118 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_2_reg_589_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_fu_118 <= sum_6_reg_660;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln39_4_reg_544 <= add_ln39_4_fu_268_p2;
        icmp_ln39_reg_540 <= icmp_ln39_fu_263_p2;
        icmp_ln39_reg_540_pp0_iter1_reg <= icmp_ln39_reg_540;
        icmp_ln39_reg_540_pp0_iter2_reg <= icmp_ln39_reg_540_pp0_iter1_reg;
        icmp_ln39_reg_540_pp0_iter3_reg <= icmp_ln39_reg_540_pp0_iter2_reg;
        icmp_ln43_reg_554 <= icmp_ln43_fu_280_p2;
        image_in_addr_read_reg_635 <= m_axi_image_in_RDATA;
        j_load_reg_549 <= j_fu_106;
        select_ln39_reg_559 <= select_ln39_fu_291_p3;
        trunc_ln55_12_reg_614 <= trunc_ln55_12_fu_398_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_addr_read_reg_630 <= m_axi_kernel_RDATA;
        trunc_ln55_reg_584 <= trunc_ln55_fu_319_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul21_2_reg_650 <= grp_fu_1990_p_dout0;
        p_cast_reg_535[30 : 0] <= p_cast_fu_236_p1[30 : 0];
        sum_6_reg_660 <= grp_fu_1986_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        newCol_reg_578 <= newCol_fu_313_p2;
        newRow_3_reg_572 <= newRow_3_fu_305_p2;
        select_ln24_reg_566 <= select_ln24_fu_299_p3;
        trunc_ln55_11_reg_619 <= {{add_ln55_9_fu_414_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        newRow_reg_593 <= grp_Pad_fu_1976_p_dout0_1;
        tmp_2_reg_589 <= grp_Pad_fu_1976_p_dout0_0;
        tmp_2_reg_589_pp0_iter1_reg <= tmp_2_reg_589;
        tmp_2_reg_589_pp0_iter2_reg <= tmp_2_reg_589_pp0_iter1_reg;
        tmp_2_reg_589_pp0_iter3_reg <= tmp_2_reg_589_pp0_iter2_reg;
        tmp_2_reg_589_pp0_iter4_reg <= tmp_2_reg_589_pp0_iter3_reg;
        trunc_ln50_reg_598 <= trunc_ln50_fu_335_p1;
        trunc_ln55_s_reg_603 <= {{add_ln55_11_fu_355_p2[31:2]}};
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_540 == 1'd1) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln39_reg_540_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_2_reg_589_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_sum_load_6 = sum_6_reg_660;
    end else begin
        ap_sig_allocacmp_sum_load_6 = sum_fu_118;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp75) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp71) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_Pad_fu_213_ap_ce = 1'b1;
    end else begin
        grp_Pad_fu_213_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_224_ce = 1'b1;
    end else begin
        grp_fu_224_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_228_ce = 1'b1;
    end else begin
        grp_fu_228_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_232_ce = 1'b1;
    end else begin
        grp_fu_232_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_232_p0 = newRow_reg_593;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_232_p0 = select_ln39_reg_559;
    end else begin
        grp_fu_232_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_232_p1 = cols;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_232_p1 = kernel_dim;
    end else begin
        grp_fu_232_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_2_reg_589 == 1'd1))) begin
        image_in_blk_n_AR = m_axi_image_in_ARREADY;
    end else begin
        image_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_2_reg_589_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        image_in_blk_n_R = m_axi_image_in_RVALID;
    end else begin
        image_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_2_reg_589 == 1'd1))) begin
        kernel_blk_n_AR = m_axi_kernel_ARREADY;
    end else begin
        kernel_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_2_reg_589_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_blk_n_R = m_axi_kernel_RVALID;
    end else begin
        kernel_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_2_reg_589 == 1'd1))) begin
        m_axi_image_in_ARVALID = 1'b1;
    end else begin
        m_axi_image_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_2_reg_589_pp0_iter2_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_image_in_RREADY = 1'b1;
    end else begin
        m_axi_image_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op89_readreq_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_kernel_ARVALID = 1'b1;
    end else begin
        m_axi_kernel_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_2_reg_589_pp0_iter1_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        m_axi_kernel_RREADY = 1'b1;
    end else begin
        m_axi_kernel_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln39_reg_540_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_7_out_ap_vld = 1'b1;
    end else begin
        sum_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_4_fu_268_p2 = (indvar_flatten41_fu_114 + 64'd1);

assign add_ln39_fu_285_p2 = (i_fu_110 + 32'd1);

assign add_ln43_fu_380_p2 = (select_ln24_reg_566 + 32'd1);

assign add_ln55_10_fu_342_p2 = (trunc_ln55_14_fu_339_p1 + trunc_ln55_reg_584);

assign add_ln55_11_fu_355_p2 = (shl_ln55_5_fu_347_p3 + kernel_offset);

assign add_ln55_8_fu_402_p2 = (trunc_ln55_12_reg_614 + trunc_ln50_reg_598);

assign add_ln55_9_fu_414_p2 = (shl_ln55_4_fu_406_p3 + image_in_offset);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state6_io));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage1_iter3));
end

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage1_iter3));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage1_iter3));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage1_iter3));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage3_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_11001_ignoreCallOp71 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage3_iter2_ignore_call14)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage3_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001_ignoreCallOp75 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage3_iter2 = ((tmp_2_reg_589_pp0_iter1_reg == 1'd1) & (m_axi_kernel_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state14_pp0_stage3_iter2_ignore_call14 = ((tmp_2_reg_589_pp0_iter1_reg == 1'd1) & (m_axi_kernel_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage1_iter3 = ((tmp_2_reg_589_pp0_iter2_reg == 1'd1) & (m_axi_image_in_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((m_axi_kernel_ARREADY == 1'b0) & (ap_predicate_op89_readreq_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state9_io = ((tmp_2_reg_589 == 1'd1) & (m_axi_image_in_ARREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

always @ (*) begin
    ap_predicate_op89_readreq_state6 = ((icmp_ln39_reg_540 == 1'd0) & (tmp_2_reg_589 == 1'd1));
end

assign bitcast_ln55_4_fu_439_p1 = image_in_addr_read_reg_635;

assign bitcast_ln55_5_fu_443_p1 = kernel_addr_read_reg_630;

assign grp_Pad_fu_1976_p_ce = grp_Pad_fu_213_ap_ce;

assign grp_Pad_fu_1976_p_din1 = newRow_3_reg_572;

assign grp_Pad_fu_1976_p_din2 = newRow_3_reg_572;

assign grp_Pad_fu_1976_p_din3 = newCol_reg_578;

assign grp_Pad_fu_1976_p_din4 = newCol_reg_578;

assign grp_Pad_fu_1976_p_din5 = rows;

assign grp_Pad_fu_1976_p_din6 = cols;

assign grp_Pad_fu_1976_p_din7 = empty;

assign grp_fu_1986_p_ce = grp_fu_224_ce;

assign grp_fu_1986_p_din0 = ap_sig_allocacmp_sum_load_6;

assign grp_fu_1986_p_din1 = mul21_2_reg_650;

assign grp_fu_1986_p_opcode = 2'd0;

assign grp_fu_1990_p_ce = grp_fu_228_ce;

assign grp_fu_1990_p_din0 = bitcast_ln55_4_fu_439_p1;

assign grp_fu_1990_p_din1 = bitcast_ln55_5_fu_443_p1;

assign grp_fu_618_p_ce = grp_fu_232_ce;

assign grp_fu_618_p_din0 = grp_fu_232_p0;

assign grp_fu_618_p_din1 = grp_fu_232_p1;

assign icmp_ln39_fu_263_p2 = ((indvar_flatten41_fu_114 == mul_ln7) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_280_p1 = kernel_dim;

assign icmp_ln43_fu_280_p2 = ((j_fu_106 == icmp_ln43_fu_280_p1) ? 1'b1 : 1'b0);

assign m_axi_image_in_ARADDR = sext_ln55_4_fu_429_p1;

assign m_axi_image_in_ARBURST = 2'd0;

assign m_axi_image_in_ARCACHE = 4'd0;

assign m_axi_image_in_ARID = 1'd0;

assign m_axi_image_in_ARLEN = 32'd1;

assign m_axi_image_in_ARLOCK = 2'd0;

assign m_axi_image_in_ARPROT = 3'd0;

assign m_axi_image_in_ARQOS = 4'd0;

assign m_axi_image_in_ARREGION = 4'd0;

assign m_axi_image_in_ARSIZE = 3'd0;

assign m_axi_image_in_ARUSER = 1'd0;

assign m_axi_image_in_AWADDR = 32'd0;

assign m_axi_image_in_AWBURST = 2'd0;

assign m_axi_image_in_AWCACHE = 4'd0;

assign m_axi_image_in_AWID = 1'd0;

assign m_axi_image_in_AWLEN = 32'd0;

assign m_axi_image_in_AWLOCK = 2'd0;

assign m_axi_image_in_AWPROT = 3'd0;

assign m_axi_image_in_AWQOS = 4'd0;

assign m_axi_image_in_AWREGION = 4'd0;

assign m_axi_image_in_AWSIZE = 3'd0;

assign m_axi_image_in_AWUSER = 1'd0;

assign m_axi_image_in_AWVALID = 1'b0;

assign m_axi_image_in_BREADY = 1'b0;

assign m_axi_image_in_WDATA = 32'd0;

assign m_axi_image_in_WID = 1'd0;

assign m_axi_image_in_WLAST = 1'b0;

assign m_axi_image_in_WSTRB = 4'd0;

assign m_axi_image_in_WUSER = 1'd0;

assign m_axi_image_in_WVALID = 1'b0;

assign m_axi_kernel_ARADDR = sext_ln55_5_fu_370_p1;

assign m_axi_kernel_ARBURST = 2'd0;

assign m_axi_kernel_ARCACHE = 4'd0;

assign m_axi_kernel_ARID = 1'd0;

assign m_axi_kernel_ARLEN = 32'd1;

assign m_axi_kernel_ARLOCK = 2'd0;

assign m_axi_kernel_ARPROT = 3'd0;

assign m_axi_kernel_ARQOS = 4'd0;

assign m_axi_kernel_ARREGION = 4'd0;

assign m_axi_kernel_ARSIZE = 3'd0;

assign m_axi_kernel_ARUSER = 1'd0;

assign m_axi_kernel_AWADDR = 32'd0;

assign m_axi_kernel_AWBURST = 2'd0;

assign m_axi_kernel_AWCACHE = 4'd0;

assign m_axi_kernel_AWID = 1'd0;

assign m_axi_kernel_AWLEN = 32'd0;

assign m_axi_kernel_AWLOCK = 2'd0;

assign m_axi_kernel_AWPROT = 3'd0;

assign m_axi_kernel_AWQOS = 4'd0;

assign m_axi_kernel_AWREGION = 4'd0;

assign m_axi_kernel_AWSIZE = 3'd0;

assign m_axi_kernel_AWUSER = 1'd0;

assign m_axi_kernel_AWVALID = 1'b0;

assign m_axi_kernel_BREADY = 1'b0;

assign m_axi_kernel_WDATA = 32'd0;

assign m_axi_kernel_WID = 1'd0;

assign m_axi_kernel_WLAST = 1'b0;

assign m_axi_kernel_WSTRB = 4'd0;

assign m_axi_kernel_WUSER = 1'd0;

assign m_axi_kernel_WVALID = 1'b0;

assign newCol_fu_313_p2 = (sub_ln48_fu_309_p2 + select_ln24_fu_299_p3);

assign newRow_3_fu_305_p2 = ($signed(add_2) + $signed(select_ln39_reg_559));

assign p_cast_fu_236_p1 = empty_31;

assign select_ln24_fu_299_p3 = ((icmp_ln43_reg_554[0:0] == 1'b1) ? 32'd0 : j_load_reg_549);

assign select_ln39_fu_291_p3 = ((icmp_ln43_fu_280_p2[0:0] == 1'b1) ? add_ln39_fu_285_p2 : i_fu_110);

assign sext_ln55_4_fu_429_p1 = $signed(trunc_ln55_11_reg_619);

assign sext_ln55_5_fu_370_p1 = $signed(trunc_ln55_s_reg_603);

assign shl_ln55_4_fu_406_p3 = {{add_ln55_8_fu_402_p2}, {2'd0}};

assign shl_ln55_5_fu_347_p3 = {{add_ln55_10_fu_342_p2}, {2'd0}};

assign sub_ln48_fu_309_p2 = (col_4 - p_cast_reg_535);

assign sum_7_out = sum_fu_118;

assign trunc_ln50_fu_335_p1 = grp_Pad_fu_1976_p_dout0_2[29:0];

assign trunc_ln55_12_fu_398_p1 = grp_fu_618_p_dout0[29:0];

assign trunc_ln55_14_fu_339_p1 = select_ln24_reg_566[29:0];

assign trunc_ln55_fu_319_p1 = grp_fu_618_p_dout0[29:0];

always @ (posedge ap_clk) begin
    p_cast_reg_535[31] <= 1'b0;
end

endmodule //LinearImageFilter_LinearImageFilter_Pipeline_ker_rows_ker_cols2
