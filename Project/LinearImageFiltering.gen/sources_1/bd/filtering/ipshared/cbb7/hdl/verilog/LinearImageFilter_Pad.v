// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LinearImageFilter_Pad (
        ap_clk,
        ap_rst,
        row_read_5,
        row_read,
        col_read_5,
        col_read,
        matRows,
        matCols,
        padding,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] row_read_5;
input  [31:0] row_read;
input  [31:0] col_read_5;
input  [31:0] col_read;
input  [31:0] matRows;
input  [31:0] matCols;
input  [2:0] padding;
output  [0:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
input   ap_ce;

reg[0:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;

reg   [31:0] matCols_read_reg_495;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] matRows_read_reg_503;
reg   [31:0] col_read_3_reg_511;
reg   [31:0] row_read_3_reg_516;
wire   [30:0] trunc_ln67_fu_84_p1;
reg   [30:0] trunc_ln67_reg_521;
wire   [30:0] trunc_ln67_1_fu_88_p1;
reg   [30:0] trunc_ln67_1_reg_526;
wire   [0:0] tmp_fu_92_p3;
reg   [0:0] tmp_reg_531;
wire   [0:0] tmp_1_fu_112_p3;
reg   [0:0] tmp_1_reg_538;
wire   [0:0] or_ln69_2_fu_144_p2;
reg   [0:0] or_ln69_2_reg_545;
wire   [31:0] select_ln69_fu_176_p3;
reg   [31:0] select_ln69_reg_552;
wire   [31:0] select_ln69_1_fu_210_p3;
reg   [31:0] select_ln69_1_reg_559;
wire   [0:0] icmp_ln71_fu_218_p2;
reg   [0:0] icmp_ln71_reg_566;
wire   [0:0] icmp_ln71_1_fu_224_p2;
reg   [0:0] icmp_ln71_1_reg_572;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln69_fu_100_p2;
wire   [0:0] icmp_ln69_1_fu_120_p2;
wire   [0:0] xor_ln69_1_fu_106_p2;
wire   [0:0] xor_ln69_2_fu_126_p2;
wire   [0:0] or_ln69_1_fu_138_p2;
wire   [0:0] or_ln69_fu_132_p2;
wire   [0:0] abscond_fu_156_p2;
wire   [31:0] neg_fu_150_p2;
wire   [31:0] abs_fu_162_p3;
wire   [31:0] add_ln94_fu_170_p2;
wire   [0:0] abscond3_fu_190_p2;
wire   [31:0] neg2_fu_184_p2;
wire   [31:0] abs4_fu_196_p3;
wire   [31:0] add_ln102_fu_204_p2;
wire   [30:0] select_ln74_fu_230_p3;
wire   [31:0] zext_ln78_fu_236_p1;
wire   [0:0] icmp_ln78_fu_240_p2;
wire   [0:0] xor_ln78_fu_245_p2;
wire   [31:0] add_ln80_fu_251_p2;
wire   [30:0] select_ln82_fu_269_p3;
wire   [31:0] zext_ln86_fu_275_p1;
wire   [0:0] icmp_ln86_fu_279_p2;
wire   [0:0] xor_ln86_fu_284_p2;
wire   [31:0] add_ln88_fu_290_p2;
wire   [31:0] shl_ln98_fu_312_p2;
wire   [31:0] add_ln98_fu_317_p2;
wire   [0:0] icmp_ln96_fu_308_p2;
wire   [31:0] sub_ln98_fu_323_p2;
wire   [0:0] xor_ln96_fu_335_p2;
wire   [31:0] shl_ln106_fu_350_p2;
wire   [31:0] add_ln106_fu_355_p2;
wire   [0:0] and_ln71_fu_366_p2;
wire   [31:0] select_ln78_fu_256_p3;
wire   [31:0] select_ln96_fu_328_p3;
wire   [0:0] or_ln90_fu_303_p2;
wire   [0:0] and_ln71_2_fu_384_p2;
wire   [0:0] icmp_ln104_fu_346_p2;
wire   [0:0] and_ln104_fu_388_p2;
wire   [0:0] and_ln71_1_fu_378_p2;
wire   [0:0] xor_ln104_fu_401_p2;
wire   [0:0] and_ln104_1_fu_407_p2;
wire   [0:0] select_ln104_fu_394_p3;
wire   [0:0] or_ln96_fu_341_p2;
wire   [0:0] or_ln82_fu_264_p2;
wire   [0:0] and_ln71_3_fu_419_p2;
wire   [31:0] select_ln86_fu_295_p3;
wire   [31:0] sub_ln106_fu_361_p2;
wire   [31:0] select_ln104_1_fu_433_p3;
wire   [0:0] xor_ln69_fu_448_p2;
wire   [0:0] or_ln71_fu_453_p2;
wire   [0:0] select_ln71_1_fu_425_p3;
wire   [31:0] select_ln71_fu_370_p3;
wire   [0:0] or_ln104_fu_413_p2;
wire   [31:0] select_ln104_2_fu_440_p3;
wire   [0:0] or_ln71_1_fu_458_p2;
wire   [31:0] select_ln116_fu_463_p3;
wire   [31:0] select_ln116_1_fu_470_p3;
reg    ap_ce_reg;
reg   [0:0] ap_return_0_int_reg;
reg   [31:0] ap_return_1_int_reg;
reg   [31:0] ap_return_2_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= or_ln71_1_fu_458_p2;
        ap_return_1_int_reg <= select_ln116_fu_463_p3;
        ap_return_2_int_reg <= select_ln116_1_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_read_3_reg_511 <= col_read_5;
        icmp_ln71_1_reg_572 <= icmp_ln71_1_fu_224_p2;
        icmp_ln71_reg_566 <= icmp_ln71_fu_218_p2;
        matCols_read_reg_495 <= matCols;
        matRows_read_reg_503 <= matRows;
        or_ln69_2_reg_545 <= or_ln69_2_fu_144_p2;
        row_read_3_reg_516 <= row_read_5;
        select_ln69_1_reg_559 <= select_ln69_1_fu_210_p3;
        select_ln69_reg_552 <= select_ln69_fu_176_p3;
        tmp_1_reg_538 <= col_read[32'd31];
        tmp_reg_531 <= row_read[32'd31];
        trunc_ln67_1_reg_526 <= trunc_ln67_1_fu_88_p1;
        trunc_ln67_reg_521 <= trunc_ln67_fu_84_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = or_ln71_1_fu_458_p2;
    end else begin
        ap_return_0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = select_ln116_fu_463_p3;
    end else begin
        ap_return_1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_2 = ap_return_2_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_2 = select_ln116_1_fu_470_p3;
    end else begin
        ap_return_2 = 'bx;
    end
end

assign abs4_fu_196_p3 = ((abscond3_fu_190_p2[0:0] == 1'b1) ? col_read : neg2_fu_184_p2);

assign abs_fu_162_p3 = ((abscond_fu_156_p2[0:0] == 1'b1) ? row_read : neg_fu_150_p2);

assign abscond3_fu_190_p2 = (($signed(col_read) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_156_p2 = (($signed(row_read) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln102_fu_204_p2 = ($signed(abs4_fu_196_p3) + $signed(32'd4294967295));

assign add_ln106_fu_355_p2 = ($signed(shl_ln106_fu_350_p2) + $signed(32'd4294967295));

assign add_ln80_fu_251_p2 = ($signed(matRows_read_reg_503) + $signed(32'd4294967295));

assign add_ln88_fu_290_p2 = ($signed(matCols_read_reg_495) + $signed(32'd4294967295));

assign add_ln94_fu_170_p2 = ($signed(abs_fu_162_p3) + $signed(32'd4294967295));

assign add_ln98_fu_317_p2 = ($signed(shl_ln98_fu_312_p2) + $signed(32'd4294967295));

assign and_ln104_1_fu_407_p2 = (xor_ln104_fu_401_p2 & and_ln71_2_fu_384_p2);

assign and_ln104_fu_388_p2 = (icmp_ln104_fu_346_p2 & and_ln71_2_fu_384_p2);

assign and_ln71_1_fu_378_p2 = (or_ln90_fu_303_p2 & and_ln71_fu_366_p2);

assign and_ln71_2_fu_384_p2 = (or_ln69_2_reg_545 & icmp_ln71_1_reg_572);

assign and_ln71_3_fu_419_p2 = (or_ln96_fu_341_p2 & and_ln71_2_fu_384_p2);

assign and_ln71_fu_366_p2 = (or_ln69_2_reg_545 & icmp_ln71_reg_566);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign icmp_ln104_fu_346_p2 = ((select_ln69_1_reg_559 < matCols_read_reg_495) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_120_p2 = ((col_read < matCols) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_100_p2 = ((row_read < matRows) ? 1'b1 : 1'b0);

assign icmp_ln71_1_fu_224_p2 = ((padding == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_218_p2 = ((padding == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_240_p2 = ((zext_ln78_fu_236_p1 < matRows_read_reg_503) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_279_p2 = ((zext_ln86_fu_275_p1 < matCols_read_reg_495) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_308_p2 = ((select_ln69_reg_552 < matRows_read_reg_503) ? 1'b1 : 1'b0);

assign neg2_fu_184_p2 = (32'd0 - col_read);

assign neg_fu_150_p2 = (32'd0 - row_read);

assign or_ln104_fu_413_p2 = (select_ln104_fu_394_p3 | and_ln104_1_fu_407_p2);

assign or_ln69_1_fu_138_p2 = (xor_ln69_2_fu_126_p2 | tmp_fu_92_p3);

assign or_ln69_2_fu_144_p2 = (or_ln69_fu_132_p2 | or_ln69_1_fu_138_p2);

assign or_ln69_fu_132_p2 = (xor_ln69_1_fu_106_p2 | tmp_1_fu_112_p3);

assign or_ln71_1_fu_458_p2 = (or_ln71_fu_453_p2 | icmp_ln71_reg_566);

assign or_ln71_fu_453_p2 = (xor_ln69_fu_448_p2 | icmp_ln71_1_reg_572);

assign or_ln82_fu_264_p2 = (xor_ln78_fu_245_p2 | tmp_reg_531);

assign or_ln90_fu_303_p2 = (xor_ln86_fu_284_p2 | tmp_1_reg_538);

assign or_ln96_fu_341_p2 = (xor_ln96_fu_335_p2 | tmp_reg_531);

assign select_ln104_1_fu_433_p3 = ((and_ln104_fu_388_p2[0:0] == 1'b1) ? select_ln69_1_reg_559 : select_ln86_fu_295_p3);

assign select_ln104_2_fu_440_p3 = ((and_ln104_1_fu_407_p2[0:0] == 1'b1) ? sub_ln106_fu_361_p2 : select_ln104_1_fu_433_p3);

assign select_ln104_fu_394_p3 = ((and_ln104_fu_388_p2[0:0] == 1'b1) ? tmp_1_reg_538 : and_ln71_1_fu_378_p2);

assign select_ln116_1_fu_470_p3 = ((or_ln104_fu_413_p2[0:0] == 1'b1) ? select_ln104_2_fu_440_p3 : col_read_3_reg_511);

assign select_ln116_fu_463_p3 = ((select_ln71_1_fu_425_p3[0:0] == 1'b1) ? select_ln71_fu_370_p3 : row_read_3_reg_516);

assign select_ln69_1_fu_210_p3 = ((tmp_1_fu_112_p3[0:0] == 1'b1) ? add_ln102_fu_204_p2 : col_read);

assign select_ln69_fu_176_p3 = ((tmp_fu_92_p3[0:0] == 1'b1) ? add_ln94_fu_170_p2 : row_read);

assign select_ln71_1_fu_425_p3 = ((and_ln71_fu_366_p2[0:0] == 1'b1) ? or_ln82_fu_264_p2 : and_ln71_3_fu_419_p2);

assign select_ln71_fu_370_p3 = ((and_ln71_fu_366_p2[0:0] == 1'b1) ? select_ln78_fu_256_p3 : select_ln96_fu_328_p3);

assign select_ln74_fu_230_p3 = ((tmp_reg_531[0:0] == 1'b1) ? 31'd0 : trunc_ln67_1_reg_526);

assign select_ln78_fu_256_p3 = ((xor_ln78_fu_245_p2[0:0] == 1'b1) ? add_ln80_fu_251_p2 : zext_ln78_fu_236_p1);

assign select_ln82_fu_269_p3 = ((tmp_1_reg_538[0:0] == 1'b1) ? 31'd0 : trunc_ln67_reg_521);

assign select_ln86_fu_295_p3 = ((xor_ln86_fu_284_p2[0:0] == 1'b1) ? add_ln88_fu_290_p2 : zext_ln86_fu_275_p1);

assign select_ln96_fu_328_p3 = ((icmp_ln96_fu_308_p2[0:0] == 1'b1) ? select_ln69_reg_552 : sub_ln98_fu_323_p2);

assign shl_ln106_fu_350_p2 = matCols_read_reg_495 << 32'd1;

assign shl_ln98_fu_312_p2 = matRows_read_reg_503 << 32'd1;

assign sub_ln106_fu_361_p2 = (add_ln106_fu_355_p2 - select_ln69_1_reg_559);

assign sub_ln98_fu_323_p2 = (add_ln98_fu_317_p2 - select_ln69_reg_552);

assign tmp_1_fu_112_p3 = col_read[32'd31];

assign tmp_fu_92_p3 = row_read[32'd31];

assign trunc_ln67_1_fu_88_p1 = row_read[30:0];

assign trunc_ln67_fu_84_p1 = col_read[30:0];

assign xor_ln104_fu_401_p2 = (icmp_ln104_fu_346_p2 ^ 1'd1);

assign xor_ln69_1_fu_106_p2 = (icmp_ln69_fu_100_p2 ^ 1'd1);

assign xor_ln69_2_fu_126_p2 = (icmp_ln69_1_fu_120_p2 ^ 1'd1);

assign xor_ln69_fu_448_p2 = (or_ln69_2_reg_545 ^ 1'd1);

assign xor_ln78_fu_245_p2 = (icmp_ln78_fu_240_p2 ^ 1'd1);

assign xor_ln86_fu_284_p2 = (icmp_ln86_fu_279_p2 ^ 1'd1);

assign xor_ln96_fu_335_p2 = (icmp_ln96_fu_308_p2 ^ 1'd1);

assign zext_ln78_fu_236_p1 = select_ln74_fu_230_p3;

assign zext_ln86_fu_275_p1 = select_ln82_fu_269_p3;

endmodule //LinearImageFilter_Pad
