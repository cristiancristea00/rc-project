// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LinearImageFilter_LinearImageFilter_Pipeline_ker_rows_ker_cols (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_AWVALID,
        m_axi_kernel_AWREADY,
        m_axi_kernel_AWADDR,
        m_axi_kernel_AWID,
        m_axi_kernel_AWLEN,
        m_axi_kernel_AWSIZE,
        m_axi_kernel_AWBURST,
        m_axi_kernel_AWLOCK,
        m_axi_kernel_AWCACHE,
        m_axi_kernel_AWPROT,
        m_axi_kernel_AWQOS,
        m_axi_kernel_AWREGION,
        m_axi_kernel_AWUSER,
        m_axi_kernel_WVALID,
        m_axi_kernel_WREADY,
        m_axi_kernel_WDATA,
        m_axi_kernel_WSTRB,
        m_axi_kernel_WLAST,
        m_axi_kernel_WID,
        m_axi_kernel_WUSER,
        m_axi_kernel_ARVALID,
        m_axi_kernel_ARREADY,
        m_axi_kernel_ARADDR,
        m_axi_kernel_ARID,
        m_axi_kernel_ARLEN,
        m_axi_kernel_ARSIZE,
        m_axi_kernel_ARBURST,
        m_axi_kernel_ARLOCK,
        m_axi_kernel_ARCACHE,
        m_axi_kernel_ARPROT,
        m_axi_kernel_ARQOS,
        m_axi_kernel_ARREGION,
        m_axi_kernel_ARUSER,
        m_axi_kernel_RVALID,
        m_axi_kernel_RREADY,
        m_axi_kernel_RDATA,
        m_axi_kernel_RLAST,
        m_axi_kernel_RID,
        m_axi_kernel_RFIFONUM,
        m_axi_kernel_RUSER,
        m_axi_kernel_RRESP,
        m_axi_kernel_BVALID,
        m_axi_kernel_BREADY,
        m_axi_kernel_BRESP,
        m_axi_kernel_BID,
        m_axi_kernel_BUSER,
        m_axi_image_in_AWVALID,
        m_axi_image_in_AWREADY,
        m_axi_image_in_AWADDR,
        m_axi_image_in_AWID,
        m_axi_image_in_AWLEN,
        m_axi_image_in_AWSIZE,
        m_axi_image_in_AWBURST,
        m_axi_image_in_AWLOCK,
        m_axi_image_in_AWCACHE,
        m_axi_image_in_AWPROT,
        m_axi_image_in_AWQOS,
        m_axi_image_in_AWREGION,
        m_axi_image_in_AWUSER,
        m_axi_image_in_WVALID,
        m_axi_image_in_WREADY,
        m_axi_image_in_WDATA,
        m_axi_image_in_WSTRB,
        m_axi_image_in_WLAST,
        m_axi_image_in_WID,
        m_axi_image_in_WUSER,
        m_axi_image_in_ARVALID,
        m_axi_image_in_ARREADY,
        m_axi_image_in_ARADDR,
        m_axi_image_in_ARID,
        m_axi_image_in_ARLEN,
        m_axi_image_in_ARSIZE,
        m_axi_image_in_ARBURST,
        m_axi_image_in_ARLOCK,
        m_axi_image_in_ARCACHE,
        m_axi_image_in_ARPROT,
        m_axi_image_in_ARQOS,
        m_axi_image_in_ARREGION,
        m_axi_image_in_ARUSER,
        m_axi_image_in_RVALID,
        m_axi_image_in_RREADY,
        m_axi_image_in_RDATA,
        m_axi_image_in_RLAST,
        m_axi_image_in_RID,
        m_axi_image_in_RFIFONUM,
        m_axi_image_in_RUSER,
        m_axi_image_in_RRESP,
        m_axi_image_in_BVALID,
        m_axi_image_in_BREADY,
        m_axi_image_in_BRESP,
        m_axi_image_in_BID,
        m_axi_image_in_BUSER,
        mul_ln7,
        padding,
        kernel_dim,
        add28,
        rows,
        newRow_4,
        col,
        half_kernel_dim_1,
        cols,
        image_in_offset,
        kernel_offset,
        newCol_2,
        empty_26,
        empty,
        sum_1_out,
        sum_1_out_ap_vld,
        grp_fu_252_p_din0,
        grp_fu_252_p_din1,
        grp_fu_252_p_dout0,
        grp_fu_252_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_AWVALID;
input   m_axi_kernel_AWREADY;
output  [31:0] m_axi_kernel_AWADDR;
output  [0:0] m_axi_kernel_AWID;
output  [31:0] m_axi_kernel_AWLEN;
output  [2:0] m_axi_kernel_AWSIZE;
output  [1:0] m_axi_kernel_AWBURST;
output  [1:0] m_axi_kernel_AWLOCK;
output  [3:0] m_axi_kernel_AWCACHE;
output  [2:0] m_axi_kernel_AWPROT;
output  [3:0] m_axi_kernel_AWQOS;
output  [3:0] m_axi_kernel_AWREGION;
output  [0:0] m_axi_kernel_AWUSER;
output   m_axi_kernel_WVALID;
input   m_axi_kernel_WREADY;
output  [7:0] m_axi_kernel_WDATA;
output  [0:0] m_axi_kernel_WSTRB;
output   m_axi_kernel_WLAST;
output  [0:0] m_axi_kernel_WID;
output  [0:0] m_axi_kernel_WUSER;
output   m_axi_kernel_ARVALID;
input   m_axi_kernel_ARREADY;
output  [31:0] m_axi_kernel_ARADDR;
output  [0:0] m_axi_kernel_ARID;
output  [31:0] m_axi_kernel_ARLEN;
output  [2:0] m_axi_kernel_ARSIZE;
output  [1:0] m_axi_kernel_ARBURST;
output  [1:0] m_axi_kernel_ARLOCK;
output  [3:0] m_axi_kernel_ARCACHE;
output  [2:0] m_axi_kernel_ARPROT;
output  [3:0] m_axi_kernel_ARQOS;
output  [3:0] m_axi_kernel_ARREGION;
output  [0:0] m_axi_kernel_ARUSER;
input   m_axi_kernel_RVALID;
output   m_axi_kernel_RREADY;
input  [7:0] m_axi_kernel_RDATA;
input   m_axi_kernel_RLAST;
input  [0:0] m_axi_kernel_RID;
input  [10:0] m_axi_kernel_RFIFONUM;
input  [0:0] m_axi_kernel_RUSER;
input  [1:0] m_axi_kernel_RRESP;
input   m_axi_kernel_BVALID;
output   m_axi_kernel_BREADY;
input  [1:0] m_axi_kernel_BRESP;
input  [0:0] m_axi_kernel_BID;
input  [0:0] m_axi_kernel_BUSER;
output   m_axi_image_in_AWVALID;
input   m_axi_image_in_AWREADY;
output  [31:0] m_axi_image_in_AWADDR;
output  [0:0] m_axi_image_in_AWID;
output  [31:0] m_axi_image_in_AWLEN;
output  [2:0] m_axi_image_in_AWSIZE;
output  [1:0] m_axi_image_in_AWBURST;
output  [1:0] m_axi_image_in_AWLOCK;
output  [3:0] m_axi_image_in_AWCACHE;
output  [2:0] m_axi_image_in_AWPROT;
output  [3:0] m_axi_image_in_AWQOS;
output  [3:0] m_axi_image_in_AWREGION;
output  [0:0] m_axi_image_in_AWUSER;
output   m_axi_image_in_WVALID;
input   m_axi_image_in_WREADY;
output  [7:0] m_axi_image_in_WDATA;
output  [0:0] m_axi_image_in_WSTRB;
output   m_axi_image_in_WLAST;
output  [0:0] m_axi_image_in_WID;
output  [0:0] m_axi_image_in_WUSER;
output   m_axi_image_in_ARVALID;
input   m_axi_image_in_ARREADY;
output  [31:0] m_axi_image_in_ARADDR;
output  [0:0] m_axi_image_in_ARID;
output  [31:0] m_axi_image_in_ARLEN;
output  [2:0] m_axi_image_in_ARSIZE;
output  [1:0] m_axi_image_in_ARBURST;
output  [1:0] m_axi_image_in_ARLOCK;
output  [3:0] m_axi_image_in_ARCACHE;
output  [2:0] m_axi_image_in_ARPROT;
output  [3:0] m_axi_image_in_ARQOS;
output  [3:0] m_axi_image_in_ARREGION;
output  [0:0] m_axi_image_in_ARUSER;
input   m_axi_image_in_RVALID;
output   m_axi_image_in_RREADY;
input  [7:0] m_axi_image_in_RDATA;
input   m_axi_image_in_RLAST;
input  [0:0] m_axi_image_in_RID;
input  [10:0] m_axi_image_in_RFIFONUM;
input  [0:0] m_axi_image_in_RUSER;
input  [1:0] m_axi_image_in_RRESP;
input   m_axi_image_in_BVALID;
output   m_axi_image_in_BREADY;
input  [1:0] m_axi_image_in_BRESP;
input  [0:0] m_axi_image_in_BID;
input  [0:0] m_axi_image_in_BUSER;
input  [63:0] mul_ln7;
input  [7:0] padding;
input  [31:0] kernel_dim;
input  [31:0] add28;
input  [31:0] rows;
input  [31:0] newRow_4;
input  [31:0] col;
input  [30:0] half_kernel_dim_1;
input  [31:0] cols;
input  [31:0] image_in_offset;
input  [31:0] kernel_offset;
input  [31:0] newCol_2;
input  [31:0] empty_26;
input  [31:0] empty;
output  [31:0] sum_1_out;
output   sum_1_out_ap_vld;
output  [31:0] grp_fu_252_p_din0;
output  [31:0] grp_fu_252_p_din1;
input  [31:0] grp_fu_252_p_dout0;
output   grp_fu_252_p_ce;

reg ap_idle;
reg m_axi_kernel_ARVALID;
reg m_axi_kernel_RREADY;
reg m_axi_image_in_ARVALID;
reg m_axi_image_in_RREADY;
reg sum_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_idle_pp0;
reg   [0:0] or_ln78_1_reg_840;
reg   [0:0] or_ln78_1_reg_840_pp0_iter4_reg;
reg    ap_predicate_op127_readreq_state6;
reg    ap_block_state6_io;
reg   [0:0] or_ln78_1_reg_840_pp0_iter7_reg;
reg    ap_predicate_op134_readreq_state9;
reg    ap_block_state9_io;
reg   [0:0] or_ln78_1_reg_840_pp0_iter12_reg;
reg    ap_predicate_op145_read_state14;
reg    ap_block_state14_pp0_stage0_iter13;
reg   [0:0] or_ln78_1_reg_840_pp0_iter15_reg;
reg    ap_predicate_op148_read_state17;
reg    ap_block_state17_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln48_fu_303_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    kernel_blk_n_R;
reg    image_in_blk_n_AR;
reg    image_in_blk_n_R;
reg   [31:0] newCol_6_ph_reg_243;
reg   [31:0] newCol_6_ph_reg_243_pp0_iter6_reg;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] half_kernel_dim_1_cast_fu_276_p1;
reg   [31:0] half_kernel_dim_1_cast_reg_766;
reg   [0:0] icmp_ln48_reg_771;
reg   [0:0] icmp_ln48_reg_771_pp0_iter2_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter3_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter4_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter5_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter6_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter7_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter8_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter9_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter10_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter11_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter12_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter13_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter14_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter15_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter16_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter17_reg;
reg   [0:0] icmp_ln48_reg_771_pp0_iter18_reg;
wire   [31:0] select_ln24_fu_325_p3;
reg   [31:0] select_ln24_reg_775;
reg   [31:0] select_ln24_reg_775_pp0_iter2_reg;
reg   [31:0] select_ln24_reg_775_pp0_iter3_reg;
wire  signed [31:0] select_ln48_fu_339_p3;
reg  signed [31:0] select_ln48_reg_781;
wire   [31:0] add_ln52_fu_347_p2;
reg   [31:0] add_ln52_reg_787;
wire   [31:0] newRow_fu_363_p2;
reg   [31:0] newRow_reg_792;
wire   [0:0] tmp_2_fu_371_p3;
reg   [0:0] tmp_2_reg_802;
wire   [31:0] newRow_1_fu_402_p3;
reg   [31:0] newRow_1_reg_808;
wire   [31:0] newCol_fu_413_p2;
reg   [31:0] newCol_reg_813;
wire   [30:0] trunc_ln28_fu_418_p1;
reg   [30:0] trunc_ln28_reg_823;
reg   [0:0] tmp_3_reg_828;
reg   [31:0] mul37_reg_835;
wire   [0:0] or_ln78_1_fu_464_p2;
reg   [0:0] or_ln78_1_reg_840_pp0_iter5_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter6_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter8_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter9_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter10_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter11_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter13_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter14_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter16_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter17_reg;
reg   [0:0] or_ln78_1_reg_840_pp0_iter18_reg;
wire   [31:0] newRow_2_fu_493_p3;
reg   [31:0] newRow_2_reg_844;
wire   [31:0] newCol_5_fu_522_p3;
reg   [31:0] newCol_5_reg_851;
wire   [31:0] newCol_3_fu_549_p3;
wire   [31:0] newRow_7_fu_576_p3;
wire   [31:0] newCol_7_fu_603_p3;
reg   [31:0] kernel_addr_reg_873;
wire   [31:0] grp_fu_271_p2;
reg   [31:0] mul_ln64_reg_879;
reg   [31:0] image_in_addr_reg_884;
reg   [7:0] kernel_addr_read_reg_890;
reg   [7:0] kernel_addr_read_reg_890_pp0_iter14_reg;
reg   [7:0] kernel_addr_read_reg_890_pp0_iter15_reg;
reg   [7:0] kernel_addr_read_reg_890_pp0_iter16_reg;
reg   [7:0] image_in_addr_read_reg_895;
wire   [31:0] ap_phi_reg_pp0_iter0_newCol_6_ph_reg_243;
reg   [31:0] ap_phi_reg_pp0_iter1_newCol_6_ph_reg_243;
reg   [31:0] ap_phi_reg_pp0_iter2_newCol_6_ph_reg_243;
reg   [31:0] ap_phi_reg_pp0_iter3_newCol_6_ph_reg_243;
reg   [31:0] ap_phi_reg_pp0_iter4_newCol_6_ph_reg_243;
reg   [31:0] ap_phi_reg_pp0_iter5_newCol_6_ph_reg_243;
wire  signed [31:0] ap_phi_reg_pp0_iter0_newRow_6_ph_reg_255;
reg  signed [31:0] ap_phi_reg_pp0_iter1_newRow_6_ph_reg_255;
reg  signed [31:0] ap_phi_reg_pp0_iter2_newRow_6_ph_reg_255;
reg  signed [31:0] ap_phi_reg_pp0_iter3_newRow_6_ph_reg_255;
reg  signed [31:0] ap_phi_reg_pp0_iter4_newRow_6_ph_reg_255;
reg  signed [31:0] ap_phi_reg_pp0_iter5_newRow_6_ph_reg_255;
wire   [31:0] add_ln64_3_fu_614_p2;
wire   [31:0] add_ln64_1_fu_629_p2;
reg   [31:0] j_fu_112;
reg   [31:0] ap_sig_allocacmp_j_load;
wire    ap_loop_init;
reg   [31:0] i_fu_116;
reg   [63:0] indvar_flatten6_fu_120;
wire   [63:0] add_ln48_fu_308_p2;
reg   [31:0] sum_fu_124;
wire   [31:0] grp_fu_658_p3;
reg    ap_predicate_pred616_state21;
reg   [31:0] ap_sig_allocacmp_sum_load_1;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] icmp_ln52_fu_320_p1;
wire   [0:0] icmp_ln52_fu_320_p2;
wire   [31:0] add_ln48_1_fu_333_p2;
wire   [30:0] empty_30_fu_367_p1;
wire   [30:0] newRow_3_fu_379_p3;
wire   [31:0] newRow_3_cast_fu_387_p1;
wire   [0:0] ult32_fu_391_p2;
wire   [0:0] rev33_fu_396_p2;
wire   [31:0] sub_ln57_fu_409_p2;
wire   [0:0] ult_fu_434_p2;
wire  signed [31:0] icmp_ln78_fu_444_p1;
wire   [0:0] icmp_ln78_fu_444_p2;
wire   [0:0] xor_ln78_fu_448_p2;
wire   [0:0] rev_fu_438_p2;
wire   [0:0] or_ln78_fu_459_p2;
wire   [0:0] or_ln78_2_fu_454_p2;
wire   [0:0] abscond_fu_475_p2;
wire   [31:0] neg_fu_470_p2;
wire   [31:0] abs_fu_480_p3;
wire   [31:0] newRow_5_fu_487_p2;
wire   [0:0] abscond2_fu_504_p2;
wire   [31:0] neg1_fu_499_p2;
wire   [31:0] abs3_fu_509_p3;
wire   [31:0] newCol_4_fu_516_p2;
wire   [30:0] newCol_1_fu_528_p3;
wire   [31:0] zext_ln28_fu_534_p1;
wire  signed [31:0] icmp_ln95_fu_538_p1;
wire   [0:0] icmp_ln95_fu_538_p2;
wire   [0:0] xor_ln95_fu_543_p2;
wire   [0:0] icmp_ln105_fu_556_p2;
wire   [31:0] add_ln107_fu_566_p2;
wire   [0:0] xor_ln105_fu_560_p2;
wire   [31:0] newRow_6_fu_571_p2;
wire  signed [31:0] icmp_ln113_fu_583_p1;
wire   [0:0] icmp_ln113_fu_583_p2;
wire   [31:0] add_ln115_fu_593_p2;
wire   [0:0] xor_ln113_fu_587_p2;
wire   [31:0] newCol_6_fu_598_p2;
wire   [31:0] add_ln64_2_fu_610_p2;
wire   [31:0] add_ln64_fu_625_p2;
wire   [7:0] grp_fu_658_p0;
wire   [7:0] grp_fu_658_p1;
reg    grp_fu_267_ce;
reg    grp_fu_271_ce;
reg    grp_fu_658_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_658_p00;
wire   [15:0] grp_fu_658_p10;
reg    ap_condition_552;
reg    ap_condition_558;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 j_fu_112 = 32'd0;
#0 i_fu_116 = 32'd0;
#0 indvar_flatten6_fu_120 = 64'd0;
#0 sum_fu_124 = 32'd0;
#0 ap_done_reg = 1'b0;
end

LinearImageFilter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_reg_pp0_iter5_newRow_6_ph_reg_255),
    .din1(cols),
    .ce(grp_fu_271_ce),
    .dout(grp_fu_271_p2)
);

LinearImageFilter_mac_muladd_8ns_8ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_8ns_8ns_32ns_32_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_658_p0),
    .din1(grp_fu_658_p1),
    .din2(ap_sig_allocacmp_sum_load_1),
    .ce(grp_fu_658_ce),
    .dout(grp_fu_658_p3)
);

LinearImageFilter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter19_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((or_ln78_1_fu_464_p2 == 1'd0) & (icmp_ln48_reg_771_pp0_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter4_newCol_6_ph_reg_243 <= newCol_reg_813;
        end else if ((1'b1 == ap_condition_552)) begin
            ap_phi_reg_pp0_iter4_newCol_6_ph_reg_243 <= newCol_3_fu_549_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_newCol_6_ph_reg_243 <= ap_phi_reg_pp0_iter3_newCol_6_ph_reg_243;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((or_ln78_1_fu_464_p2 == 1'd0) & (icmp_ln48_reg_771_pp0_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter4_newRow_6_ph_reg_255 <= newRow_reg_792;
        end else if ((1'b1 == ap_condition_552)) begin
            ap_phi_reg_pp0_iter4_newRow_6_ph_reg_255 <= newRow_1_reg_808;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_newRow_6_ph_reg_255 <= ap_phi_reg_pp0_iter3_newRow_6_ph_reg_255;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'b1 == ap_condition_558)) begin
            ap_phi_reg_pp0_iter5_newCol_6_ph_reg_243 <= newCol_7_fu_603_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_newCol_6_ph_reg_243 <= ap_phi_reg_pp0_iter4_newCol_6_ph_reg_243;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'b1 == ap_condition_558)) begin
            ap_phi_reg_pp0_iter5_newRow_6_ph_reg_255 <= newRow_7_fu_576_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_newRow_6_ph_reg_255 <= ap_phi_reg_pp0_iter4_newRow_6_ph_reg_255;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_116 <= 32'd0;
        end else if (((icmp_ln48_fu_303_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_116 <= select_ln48_fu_339_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_120 <= 64'd0;
        end else if (((icmp_ln48_fu_303_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten6_fu_120 <= add_ln48_fu_308_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_112 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_112 <= add_ln52_reg_787;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_fu_124 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter20 == 1'b1) & (ap_predicate_pred616_state21 == 1'b1))) begin
            sum_fu_124 <= grp_fu_658_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln52_reg_787 <= add_ln52_fu_347_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        half_kernel_dim_1_cast_reg_766[30 : 0] <= half_kernel_dim_1_cast_fu_276_p1[30 : 0];
        icmp_ln48_reg_771 <= icmp_ln48_fu_303_p2;
        select_ln24_reg_775 <= select_ln24_fu_325_p3;
        select_ln48_reg_781 <= select_ln48_fu_339_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        ap_predicate_pred616_state21 <= ((or_ln78_1_reg_840_pp0_iter18_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
        icmp_ln48_reg_771_pp0_iter10_reg <= icmp_ln48_reg_771_pp0_iter9_reg;
        icmp_ln48_reg_771_pp0_iter11_reg <= icmp_ln48_reg_771_pp0_iter10_reg;
        icmp_ln48_reg_771_pp0_iter12_reg <= icmp_ln48_reg_771_pp0_iter11_reg;
        icmp_ln48_reg_771_pp0_iter13_reg <= icmp_ln48_reg_771_pp0_iter12_reg;
        icmp_ln48_reg_771_pp0_iter14_reg <= icmp_ln48_reg_771_pp0_iter13_reg;
        icmp_ln48_reg_771_pp0_iter15_reg <= icmp_ln48_reg_771_pp0_iter14_reg;
        icmp_ln48_reg_771_pp0_iter16_reg <= icmp_ln48_reg_771_pp0_iter15_reg;
        icmp_ln48_reg_771_pp0_iter17_reg <= icmp_ln48_reg_771_pp0_iter16_reg;
        icmp_ln48_reg_771_pp0_iter18_reg <= icmp_ln48_reg_771_pp0_iter17_reg;
        icmp_ln48_reg_771_pp0_iter2_reg <= icmp_ln48_reg_771;
        icmp_ln48_reg_771_pp0_iter3_reg <= icmp_ln48_reg_771_pp0_iter2_reg;
        icmp_ln48_reg_771_pp0_iter4_reg <= icmp_ln48_reg_771_pp0_iter3_reg;
        icmp_ln48_reg_771_pp0_iter5_reg <= icmp_ln48_reg_771_pp0_iter4_reg;
        icmp_ln48_reg_771_pp0_iter6_reg <= icmp_ln48_reg_771_pp0_iter5_reg;
        icmp_ln48_reg_771_pp0_iter7_reg <= icmp_ln48_reg_771_pp0_iter6_reg;
        icmp_ln48_reg_771_pp0_iter8_reg <= icmp_ln48_reg_771_pp0_iter7_reg;
        icmp_ln48_reg_771_pp0_iter9_reg <= icmp_ln48_reg_771_pp0_iter8_reg;
        image_in_addr_read_reg_895 <= m_axi_image_in_RDATA;
        image_in_addr_reg_884 <= add_ln64_1_fu_629_p2;
        kernel_addr_read_reg_890 <= m_axi_kernel_RDATA;
        kernel_addr_read_reg_890_pp0_iter14_reg <= kernel_addr_read_reg_890;
        kernel_addr_read_reg_890_pp0_iter15_reg <= kernel_addr_read_reg_890_pp0_iter14_reg;
        kernel_addr_read_reg_890_pp0_iter16_reg <= kernel_addr_read_reg_890_pp0_iter15_reg;
        kernel_addr_reg_873 <= add_ln64_3_fu_614_p2;
        mul37_reg_835 <= grp_fu_252_p_dout0;
        mul_ln64_reg_879 <= grp_fu_271_p2;
        newCol_5_reg_851 <= newCol_5_fu_522_p3;
        newCol_6_ph_reg_243_pp0_iter6_reg <= newCol_6_ph_reg_243;
        newCol_reg_813 <= newCol_fu_413_p2;
        newRow_1_reg_808 <= newRow_1_fu_402_p3;
        newRow_2_reg_844 <= newRow_2_fu_493_p3;
        newRow_reg_792 <= newRow_fu_363_p2;
        or_ln78_1_reg_840 <= or_ln78_1_fu_464_p2;
        or_ln78_1_reg_840_pp0_iter10_reg <= or_ln78_1_reg_840_pp0_iter9_reg;
        or_ln78_1_reg_840_pp0_iter11_reg <= or_ln78_1_reg_840_pp0_iter10_reg;
        or_ln78_1_reg_840_pp0_iter12_reg <= or_ln78_1_reg_840_pp0_iter11_reg;
        or_ln78_1_reg_840_pp0_iter13_reg <= or_ln78_1_reg_840_pp0_iter12_reg;
        or_ln78_1_reg_840_pp0_iter14_reg <= or_ln78_1_reg_840_pp0_iter13_reg;
        or_ln78_1_reg_840_pp0_iter15_reg <= or_ln78_1_reg_840_pp0_iter14_reg;
        or_ln78_1_reg_840_pp0_iter16_reg <= or_ln78_1_reg_840_pp0_iter15_reg;
        or_ln78_1_reg_840_pp0_iter17_reg <= or_ln78_1_reg_840_pp0_iter16_reg;
        or_ln78_1_reg_840_pp0_iter18_reg <= or_ln78_1_reg_840_pp0_iter17_reg;
        or_ln78_1_reg_840_pp0_iter4_reg <= or_ln78_1_reg_840;
        or_ln78_1_reg_840_pp0_iter5_reg <= or_ln78_1_reg_840_pp0_iter4_reg;
        or_ln78_1_reg_840_pp0_iter6_reg <= or_ln78_1_reg_840_pp0_iter5_reg;
        or_ln78_1_reg_840_pp0_iter7_reg <= or_ln78_1_reg_840_pp0_iter6_reg;
        or_ln78_1_reg_840_pp0_iter8_reg <= or_ln78_1_reg_840_pp0_iter7_reg;
        or_ln78_1_reg_840_pp0_iter9_reg <= or_ln78_1_reg_840_pp0_iter8_reg;
        select_ln24_reg_775_pp0_iter2_reg <= select_ln24_reg_775;
        select_ln24_reg_775_pp0_iter3_reg <= select_ln24_reg_775_pp0_iter2_reg;
        tmp_2_reg_802 <= newRow_fu_363_p2[32'd31];
        tmp_3_reg_828 <= newCol_fu_413_p2[32'd31];
        trunc_ln28_reg_823 <= trunc_ln28_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_newCol_6_ph_reg_243 <= ap_phi_reg_pp0_iter0_newCol_6_ph_reg_243;
        ap_phi_reg_pp0_iter1_newRow_6_ph_reg_255 <= ap_phi_reg_pp0_iter0_newRow_6_ph_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_newCol_6_ph_reg_243 <= ap_phi_reg_pp0_iter1_newCol_6_ph_reg_243;
        ap_phi_reg_pp0_iter2_newRow_6_ph_reg_255 <= ap_phi_reg_pp0_iter1_newRow_6_ph_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_newCol_6_ph_reg_243 <= ap_phi_reg_pp0_iter2_newCol_6_ph_reg_243;
        ap_phi_reg_pp0_iter3_newRow_6_ph_reg_255 <= ap_phi_reg_pp0_iter2_newRow_6_ph_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        newCol_6_ph_reg_243 <= ap_phi_reg_pp0_iter5_newCol_6_ph_reg_243;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_303_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter19_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = add_ln52_reg_787;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_112;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (ap_predicate_pred616_state21 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sum_load_1 = grp_fu_658_p3;
    end else begin
        ap_sig_allocacmp_sum_load_1 = sum_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_267_ce = 1'b1;
    end else begin
        grp_fu_267_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_271_ce = 1'b1;
    end else begin
        grp_fu_271_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_658_ce = 1'b1;
    end else begin
        grp_fu_658_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op134_readreq_state9 == 1'b1))) begin
        image_in_blk_n_AR = m_axi_image_in_ARREADY;
    end else begin
        image_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (ap_predicate_op148_read_state17 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        image_in_blk_n_R = m_axi_image_in_RVALID;
    end else begin
        image_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op127_readreq_state6 == 1'b1))) begin
        kernel_blk_n_AR = m_axi_kernel_ARREADY;
    end else begin
        kernel_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op145_read_state14 == 1'b1))) begin
        kernel_blk_n_R = m_axi_kernel_RVALID;
    end else begin
        kernel_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op134_readreq_state9 == 1'b1))) begin
        m_axi_image_in_ARVALID = 1'b1;
    end else begin
        m_axi_image_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (ap_predicate_op148_read_state17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_image_in_RREADY = 1'b1;
    end else begin
        m_axi_image_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op127_readreq_state6 == 1'b1))) begin
        m_axi_kernel_ARVALID = 1'b1;
    end else begin
        m_axi_kernel_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op145_read_state14 == 1'b1))) begin
        m_axi_kernel_RREADY = 1'b1;
    end else begin
        m_axi_kernel_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_771_pp0_iter18_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_1_out_ap_vld = 1'b1;
    end else begin
        sum_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs3_fu_509_p3 = ((abscond2_fu_504_p2[0:0] == 1'b1) ? newCol_reg_813 : neg1_fu_499_p2);

assign abs_fu_480_p3 = ((abscond_fu_475_p2[0:0] == 1'b1) ? newRow_reg_792 : neg_fu_470_p2);

assign abscond2_fu_504_p2 = (($signed(newCol_reg_813) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_475_p2 = (($signed(newRow_reg_792) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln107_fu_566_p2 = ($signed(empty_26) + $signed(32'd4294967295));

assign add_ln115_fu_593_p2 = ($signed(empty) + $signed(32'd4294967295));

assign add_ln48_1_fu_333_p2 = (i_fu_116 + 32'd1);

assign add_ln48_fu_308_p2 = (indvar_flatten6_fu_120 + 64'd1);

assign add_ln52_fu_347_p2 = (select_ln24_fu_325_p3 + 32'd1);

assign add_ln64_1_fu_629_p2 = (add_ln64_fu_625_p2 + newCol_6_ph_reg_243_pp0_iter6_reg);

assign add_ln64_2_fu_610_p2 = (select_ln24_reg_775_pp0_iter3_reg + kernel_offset);

assign add_ln64_3_fu_614_p2 = (add_ln64_2_fu_610_p2 + mul37_reg_835);

assign add_ln64_fu_625_p2 = (mul_ln64_reg_879 + image_in_offset);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter16)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter16)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter16)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = ((ap_predicate_op145_read_state14 == 1'b1) & (m_axi_kernel_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage0_iter16 = ((ap_predicate_op148_read_state17 == 1'b1) & (m_axi_image_in_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((ap_predicate_op127_readreq_state6 == 1'b1) & (m_axi_kernel_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state9_io = ((ap_predicate_op134_readreq_state9 == 1'b1) & (m_axi_image_in_ARREADY == 1'b0));
end

always @ (*) begin
    ap_condition_552 = ((or_ln78_1_fu_464_p2 == 1'd1) & (icmp_ln48_reg_771_pp0_iter2_reg == 1'd0) & (padding == 8'd1));
end

always @ (*) begin
    ap_condition_558 = ((icmp_ln48_reg_771_pp0_iter3_reg == 1'd0) & (or_ln78_1_reg_840 == 1'd1) & (padding == 8'd2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_newCol_6_ph_reg_243 = 'bx;

assign ap_phi_reg_pp0_iter0_newRow_6_ph_reg_255 = 'bx;

always @ (*) begin
    ap_predicate_op127_readreq_state6 = ((or_ln78_1_reg_840_pp0_iter4_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
end

always @ (*) begin
    ap_predicate_op134_readreq_state9 = ((or_ln78_1_reg_840_pp0_iter7_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
end

always @ (*) begin
    ap_predicate_op145_read_state14 = ((or_ln78_1_reg_840_pp0_iter12_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
end

always @ (*) begin
    ap_predicate_op148_read_state17 = ((or_ln78_1_reg_840_pp0_iter15_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
end

assign empty_30_fu_367_p1 = newRow_fu_363_p2[30:0];

assign grp_fu_252_p_ce = grp_fu_267_ce;

assign grp_fu_252_p_din0 = select_ln48_reg_781;

assign grp_fu_252_p_din1 = kernel_dim;

assign grp_fu_658_p0 = grp_fu_658_p00;

assign grp_fu_658_p00 = kernel_addr_read_reg_890_pp0_iter16_reg;

assign grp_fu_658_p1 = grp_fu_658_p10;

assign grp_fu_658_p10 = image_in_addr_read_reg_895;

assign half_kernel_dim_1_cast_fu_276_p1 = half_kernel_dim_1;

assign icmp_ln105_fu_556_p2 = ((newRow_2_reg_844 < rows) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_583_p1 = cols;

assign icmp_ln113_fu_583_p2 = ((newCol_5_reg_851 < icmp_ln113_fu_583_p1) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_303_p2 = ((indvar_flatten6_fu_120 == mul_ln7) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_320_p1 = kernel_dim;

assign icmp_ln52_fu_320_p2 = ((ap_sig_allocacmp_j_load == icmp_ln52_fu_320_p1) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_444_p1 = cols;

assign icmp_ln78_fu_444_p2 = ((newCol_reg_813 < icmp_ln78_fu_444_p1) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_538_p1 = cols;

assign icmp_ln95_fu_538_p2 = ((zext_ln28_fu_534_p1 < icmp_ln95_fu_538_p1) ? 1'b1 : 1'b0);

assign m_axi_image_in_ARADDR = image_in_addr_reg_884;

assign m_axi_image_in_ARBURST = 2'd0;

assign m_axi_image_in_ARCACHE = 4'd0;

assign m_axi_image_in_ARID = 1'd0;

assign m_axi_image_in_ARLEN = 32'd1;

assign m_axi_image_in_ARLOCK = 2'd0;

assign m_axi_image_in_ARPROT = 3'd0;

assign m_axi_image_in_ARQOS = 4'd0;

assign m_axi_image_in_ARREGION = 4'd0;

assign m_axi_image_in_ARSIZE = 3'd0;

assign m_axi_image_in_ARUSER = 1'd0;

assign m_axi_image_in_AWADDR = 32'd0;

assign m_axi_image_in_AWBURST = 2'd0;

assign m_axi_image_in_AWCACHE = 4'd0;

assign m_axi_image_in_AWID = 1'd0;

assign m_axi_image_in_AWLEN = 32'd0;

assign m_axi_image_in_AWLOCK = 2'd0;

assign m_axi_image_in_AWPROT = 3'd0;

assign m_axi_image_in_AWQOS = 4'd0;

assign m_axi_image_in_AWREGION = 4'd0;

assign m_axi_image_in_AWSIZE = 3'd0;

assign m_axi_image_in_AWUSER = 1'd0;

assign m_axi_image_in_AWVALID = 1'b0;

assign m_axi_image_in_BREADY = 1'b0;

assign m_axi_image_in_WDATA = 8'd0;

assign m_axi_image_in_WID = 1'd0;

assign m_axi_image_in_WLAST = 1'b0;

assign m_axi_image_in_WSTRB = 1'd0;

assign m_axi_image_in_WUSER = 1'd0;

assign m_axi_image_in_WVALID = 1'b0;

assign m_axi_kernel_ARADDR = kernel_addr_reg_873;

assign m_axi_kernel_ARBURST = 2'd0;

assign m_axi_kernel_ARCACHE = 4'd0;

assign m_axi_kernel_ARID = 1'd0;

assign m_axi_kernel_ARLEN = 32'd1;

assign m_axi_kernel_ARLOCK = 2'd0;

assign m_axi_kernel_ARPROT = 3'd0;

assign m_axi_kernel_ARQOS = 4'd0;

assign m_axi_kernel_ARREGION = 4'd0;

assign m_axi_kernel_ARSIZE = 3'd0;

assign m_axi_kernel_ARUSER = 1'd0;

assign m_axi_kernel_AWADDR = 32'd0;

assign m_axi_kernel_AWBURST = 2'd0;

assign m_axi_kernel_AWCACHE = 4'd0;

assign m_axi_kernel_AWID = 1'd0;

assign m_axi_kernel_AWLEN = 32'd0;

assign m_axi_kernel_AWLOCK = 2'd0;

assign m_axi_kernel_AWPROT = 3'd0;

assign m_axi_kernel_AWQOS = 4'd0;

assign m_axi_kernel_AWREGION = 4'd0;

assign m_axi_kernel_AWSIZE = 3'd0;

assign m_axi_kernel_AWUSER = 1'd0;

assign m_axi_kernel_AWVALID = 1'b0;

assign m_axi_kernel_BREADY = 1'b0;

assign m_axi_kernel_WDATA = 8'd0;

assign m_axi_kernel_WID = 1'd0;

assign m_axi_kernel_WLAST = 1'b0;

assign m_axi_kernel_WSTRB = 1'd0;

assign m_axi_kernel_WUSER = 1'd0;

assign m_axi_kernel_WVALID = 1'b0;

assign neg1_fu_499_p2 = (32'd0 - newCol_reg_813);

assign neg_fu_470_p2 = (32'd0 - newRow_reg_792);

assign newCol_1_fu_528_p3 = ((tmp_3_reg_828[0:0] == 1'b1) ? 31'd0 : trunc_ln28_reg_823);

assign newCol_3_fu_549_p3 = ((xor_ln95_fu_543_p2[0:0] == 1'b1) ? newCol_2 : zext_ln28_fu_534_p1);

assign newCol_4_fu_516_p2 = ($signed(abs3_fu_509_p3) + $signed(32'd4294967295));

assign newCol_5_fu_522_p3 = ((tmp_3_reg_828[0:0] == 1'b1) ? newCol_4_fu_516_p2 : newCol_reg_813);

assign newCol_6_fu_598_p2 = (add_ln115_fu_593_p2 - newCol_5_reg_851);

assign newCol_7_fu_603_p3 = ((xor_ln113_fu_587_p2[0:0] == 1'b1) ? newCol_6_fu_598_p2 : newCol_5_reg_851);

assign newCol_fu_413_p2 = (select_ln24_reg_775 + sub_ln57_fu_409_p2);

assign newRow_1_fu_402_p3 = ((rev33_fu_396_p2[0:0] == 1'b1) ? newRow_4 : newRow_3_cast_fu_387_p1);

assign newRow_2_fu_493_p3 = ((tmp_2_reg_802[0:0] == 1'b1) ? newRow_5_fu_487_p2 : newRow_reg_792);

assign newRow_3_cast_fu_387_p1 = newRow_3_fu_379_p3;

assign newRow_3_fu_379_p3 = ((tmp_2_fu_371_p3[0:0] == 1'b1) ? 31'd0 : empty_30_fu_367_p1);

assign newRow_5_fu_487_p2 = ($signed(abs_fu_480_p3) + $signed(32'd4294967295));

assign newRow_6_fu_571_p2 = (add_ln107_fu_566_p2 - newRow_2_reg_844);

assign newRow_7_fu_576_p3 = ((xor_ln105_fu_560_p2[0:0] == 1'b1) ? newRow_6_fu_571_p2 : newRow_2_reg_844);

assign newRow_fu_363_p2 = ($signed(select_ln48_reg_781) + $signed(add28));

assign or_ln78_1_fu_464_p2 = (or_ln78_fu_459_p2 | or_ln78_2_fu_454_p2);

assign or_ln78_2_fu_454_p2 = (xor_ln78_fu_448_p2 | tmp_3_reg_828);

assign or_ln78_fu_459_p2 = (tmp_2_reg_802 | rev_fu_438_p2);

assign rev33_fu_396_p2 = (ult32_fu_391_p2 ^ 1'd1);

assign rev_fu_438_p2 = (ult_fu_434_p2 ^ 1'd1);

assign select_ln24_fu_325_p3 = ((icmp_ln52_fu_320_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_j_load);

assign select_ln48_fu_339_p3 = ((icmp_ln52_fu_320_p2[0:0] == 1'b1) ? add_ln48_1_fu_333_p2 : i_fu_116);

assign sub_ln57_fu_409_p2 = (col - half_kernel_dim_1_cast_reg_766);

assign sum_1_out = sum_fu_124;

assign tmp_2_fu_371_p3 = newRow_fu_363_p2[32'd31];

assign trunc_ln28_fu_418_p1 = newCol_fu_413_p2[30:0];

assign ult32_fu_391_p2 = ((newRow_3_cast_fu_387_p1 < rows) ? 1'b1 : 1'b0);

assign ult_fu_434_p2 = ((newRow_reg_792 < rows) ? 1'b1 : 1'b0);

assign xor_ln105_fu_560_p2 = (icmp_ln105_fu_556_p2 ^ 1'd1);

assign xor_ln113_fu_587_p2 = (icmp_ln113_fu_583_p2 ^ 1'd1);

assign xor_ln78_fu_448_p2 = (icmp_ln78_fu_444_p2 ^ 1'd1);

assign xor_ln95_fu_543_p2 = (icmp_ln95_fu_538_p2 ^ 1'd1);

assign zext_ln28_fu_534_p1 = newCol_1_fu_528_p3;

always @ (posedge ap_clk) begin
    half_kernel_dim_1_cast_reg_766[31] <= 1'b0;
end

endmodule //LinearImageFilter_LinearImageFilter_Pipeline_ker_rows_ker_cols
