// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LinearImageFilter_LinearImageFilter_Pipeline_ker_cols_sum_ker_rows_sum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_kernel_AWVALID,
        m_axi_kernel_AWREADY,
        m_axi_kernel_AWADDR,
        m_axi_kernel_AWID,
        m_axi_kernel_AWLEN,
        m_axi_kernel_AWSIZE,
        m_axi_kernel_AWBURST,
        m_axi_kernel_AWLOCK,
        m_axi_kernel_AWCACHE,
        m_axi_kernel_AWPROT,
        m_axi_kernel_AWQOS,
        m_axi_kernel_AWREGION,
        m_axi_kernel_AWUSER,
        m_axi_kernel_WVALID,
        m_axi_kernel_WREADY,
        m_axi_kernel_WDATA,
        m_axi_kernel_WSTRB,
        m_axi_kernel_WLAST,
        m_axi_kernel_WID,
        m_axi_kernel_WUSER,
        m_axi_kernel_ARVALID,
        m_axi_kernel_ARREADY,
        m_axi_kernel_ARADDR,
        m_axi_kernel_ARID,
        m_axi_kernel_ARLEN,
        m_axi_kernel_ARSIZE,
        m_axi_kernel_ARBURST,
        m_axi_kernel_ARLOCK,
        m_axi_kernel_ARCACHE,
        m_axi_kernel_ARPROT,
        m_axi_kernel_ARQOS,
        m_axi_kernel_ARREGION,
        m_axi_kernel_ARUSER,
        m_axi_kernel_RVALID,
        m_axi_kernel_RREADY,
        m_axi_kernel_RDATA,
        m_axi_kernel_RLAST,
        m_axi_kernel_RID,
        m_axi_kernel_RFIFONUM,
        m_axi_kernel_RUSER,
        m_axi_kernel_RRESP,
        m_axi_kernel_BVALID,
        m_axi_kernel_BREADY,
        m_axi_kernel_BRESP,
        m_axi_kernel_BID,
        m_axi_kernel_BUSER,
        mul_ln7,
        kernel_dim,
        kernel_offset,
        div_1_out,
        div_1_out_ap_vld,
        grp_fu_252_p_din0,
        grp_fu_252_p_din1,
        grp_fu_252_p_dout0,
        grp_fu_252_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_kernel_AWVALID;
input   m_axi_kernel_AWREADY;
output  [31:0] m_axi_kernel_AWADDR;
output  [0:0] m_axi_kernel_AWID;
output  [31:0] m_axi_kernel_AWLEN;
output  [2:0] m_axi_kernel_AWSIZE;
output  [1:0] m_axi_kernel_AWBURST;
output  [1:0] m_axi_kernel_AWLOCK;
output  [3:0] m_axi_kernel_AWCACHE;
output  [2:0] m_axi_kernel_AWPROT;
output  [3:0] m_axi_kernel_AWQOS;
output  [3:0] m_axi_kernel_AWREGION;
output  [0:0] m_axi_kernel_AWUSER;
output   m_axi_kernel_WVALID;
input   m_axi_kernel_WREADY;
output  [7:0] m_axi_kernel_WDATA;
output  [0:0] m_axi_kernel_WSTRB;
output   m_axi_kernel_WLAST;
output  [0:0] m_axi_kernel_WID;
output  [0:0] m_axi_kernel_WUSER;
output   m_axi_kernel_ARVALID;
input   m_axi_kernel_ARREADY;
output  [31:0] m_axi_kernel_ARADDR;
output  [0:0] m_axi_kernel_ARID;
output  [31:0] m_axi_kernel_ARLEN;
output  [2:0] m_axi_kernel_ARSIZE;
output  [1:0] m_axi_kernel_ARBURST;
output  [1:0] m_axi_kernel_ARLOCK;
output  [3:0] m_axi_kernel_ARCACHE;
output  [2:0] m_axi_kernel_ARPROT;
output  [3:0] m_axi_kernel_ARQOS;
output  [3:0] m_axi_kernel_ARREGION;
output  [0:0] m_axi_kernel_ARUSER;
input   m_axi_kernel_RVALID;
output   m_axi_kernel_RREADY;
input  [7:0] m_axi_kernel_RDATA;
input   m_axi_kernel_RLAST;
input  [0:0] m_axi_kernel_RID;
input  [10:0] m_axi_kernel_RFIFONUM;
input  [0:0] m_axi_kernel_RUSER;
input  [1:0] m_axi_kernel_RRESP;
input   m_axi_kernel_BVALID;
output   m_axi_kernel_BREADY;
input  [1:0] m_axi_kernel_BRESP;
input  [0:0] m_axi_kernel_BID;
input  [0:0] m_axi_kernel_BUSER;
input  [63:0] mul_ln7;
input  [31:0] kernel_dim;
input  [31:0] kernel_offset;
output  [31:0] div_1_out;
output   div_1_out_ap_vld;
output  [31:0] grp_fu_252_p_din0;
output  [31:0] grp_fu_252_p_din1;
input  [31:0] grp_fu_252_p_dout0;
output   grp_fu_252_p_ce;

reg ap_idle;
reg m_axi_kernel_ARVALID;
reg m_axi_kernel_RREADY;
reg div_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_idle_pp0;
reg    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln32_fu_136_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    kernel_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln32_reg_281;
reg   [0:0] icmp_ln32_reg_281_pp0_iter2_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter3_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter4_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter5_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter6_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter7_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter8_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter9_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter10_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter11_reg;
reg   [0:0] icmp_ln32_reg_281_pp0_iter12_reg;
wire   [31:0] select_ln25_fu_158_p3;
reg   [31:0] select_ln25_reg_285;
reg   [31:0] select_ln25_reg_285_pp0_iter2_reg;
reg   [31:0] select_ln25_reg_285_pp0_iter3_reg;
wire  signed [31:0] select_ln32_fu_172_p3;
reg  signed [31:0] select_ln32_reg_290;
wire   [31:0] add_ln34_fu_180_p2;
reg   [31:0] add_ln34_reg_295;
reg   [31:0] mul_reg_300;
reg   [31:0] kernel_addr_reg_305;
reg   [7:0] kernel_addr_read_reg_311;
wire   [31:0] add_ln36_1_fu_204_p2;
reg   [31:0] div_1_fu_56;
wire   [31:0] div_fu_221_p2;
wire    ap_loop_init;
reg   [31:0] j_fu_60;
reg   [31:0] ap_sig_allocacmp_j_load;
reg   [31:0] i_fu_64;
reg   [63:0] indvar_flatten_fu_68;
wire   [63:0] add_ln32_fu_141_p2;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] icmp_ln34_fu_153_p1;
wire   [0:0] icmp_ln34_fu_153_p2;
wire   [31:0] add_ln32_1_fu_166_p2;
wire   [31:0] add_ln36_fu_200_p2;
wire   [31:0] zext_ln36_fu_218_p1;
reg    grp_fu_109_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 div_1_fu_56 = 32'd0;
#0 j_fu_60 = 32'd0;
#0 i_fu_64 = 32'd0;
#0 indvar_flatten_fu_68 = 64'd0;
#0 ap_done_reg = 1'b0;
end

LinearImageFilter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter13_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            div_1_fu_56 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter14 == 1'b1)) begin
            div_1_fu_56 <= div_fu_221_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln32_fu_136_p2 == 1'd0))) begin
            i_fu_64 <= select_ln32_fu_172_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_68 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln32_fu_136_p2 == 1'd0))) begin
            indvar_flatten_fu_68 <= add_ln32_fu_141_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_60 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_60 <= add_ln34_reg_295;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln34_reg_295 <= add_ln34_fu_180_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln32_reg_281 <= icmp_ln32_fu_136_p2;
        select_ln25_reg_285 <= select_ln25_fu_158_p3;
        select_ln32_reg_290 <= select_ln32_fu_172_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln32_reg_281_pp0_iter10_reg <= icmp_ln32_reg_281_pp0_iter9_reg;
        icmp_ln32_reg_281_pp0_iter11_reg <= icmp_ln32_reg_281_pp0_iter10_reg;
        icmp_ln32_reg_281_pp0_iter12_reg <= icmp_ln32_reg_281_pp0_iter11_reg;
        icmp_ln32_reg_281_pp0_iter2_reg <= icmp_ln32_reg_281;
        icmp_ln32_reg_281_pp0_iter3_reg <= icmp_ln32_reg_281_pp0_iter2_reg;
        icmp_ln32_reg_281_pp0_iter4_reg <= icmp_ln32_reg_281_pp0_iter3_reg;
        icmp_ln32_reg_281_pp0_iter5_reg <= icmp_ln32_reg_281_pp0_iter4_reg;
        icmp_ln32_reg_281_pp0_iter6_reg <= icmp_ln32_reg_281_pp0_iter5_reg;
        icmp_ln32_reg_281_pp0_iter7_reg <= icmp_ln32_reg_281_pp0_iter6_reg;
        icmp_ln32_reg_281_pp0_iter8_reg <= icmp_ln32_reg_281_pp0_iter7_reg;
        icmp_ln32_reg_281_pp0_iter9_reg <= icmp_ln32_reg_281_pp0_iter8_reg;
        kernel_addr_read_reg_311 <= m_axi_kernel_RDATA;
        kernel_addr_reg_305 <= add_ln36_1_fu_204_p2;
        mul_reg_300 <= grp_fu_252_p_dout0;
        select_ln25_reg_285_pp0_iter2_reg <= select_ln25_reg_285;
        select_ln25_reg_285_pp0_iter3_reg <= select_ln25_reg_285_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter13_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = add_ln34_reg_295;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_281_pp0_iter12_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        div_1_out_ap_vld = 1'b1;
    end else begin
        div_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_109_ce = 1'b1;
    end else begin
        grp_fu_109_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        kernel_blk_n_AR = m_axi_kernel_ARREADY;
    end else begin
        kernel_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        kernel_blk_n_R = m_axi_kernel_RVALID;
    end else begin
        kernel_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_kernel_ARVALID = 1'b1;
    end else begin
        m_axi_kernel_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_kernel_RREADY = 1'b1;
    end else begin
        m_axi_kernel_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_1_fu_166_p2 = (i_fu_64 + 32'd1);

assign add_ln32_fu_141_p2 = (indvar_flatten_fu_68 + 64'd1);

assign add_ln34_fu_180_p2 = (select_ln25_fu_158_p3 + 32'd1);

assign add_ln36_1_fu_204_p2 = (add_ln36_fu_200_p2 + mul_reg_300);

assign add_ln36_fu_200_p2 = (select_ln25_reg_285_pp0_iter3_reg + kernel_offset);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((m_axi_kernel_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((m_axi_kernel_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = (m_axi_kernel_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign div_1_out = div_1_fu_56;

assign div_fu_221_p2 = (zext_ln36_fu_218_p1 + div_1_fu_56);

assign grp_fu_252_p_ce = grp_fu_109_ce;

assign grp_fu_252_p_din0 = select_ln32_reg_290;

assign grp_fu_252_p_din1 = kernel_dim;

assign icmp_ln32_fu_136_p2 = ((indvar_flatten_fu_68 == mul_ln7) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_153_p1 = kernel_dim;

assign icmp_ln34_fu_153_p2 = ((ap_sig_allocacmp_j_load == icmp_ln34_fu_153_p1) ? 1'b1 : 1'b0);

assign m_axi_kernel_ARADDR = kernel_addr_reg_305;

assign m_axi_kernel_ARBURST = 2'd0;

assign m_axi_kernel_ARCACHE = 4'd0;

assign m_axi_kernel_ARID = 1'd0;

assign m_axi_kernel_ARLEN = 32'd1;

assign m_axi_kernel_ARLOCK = 2'd0;

assign m_axi_kernel_ARPROT = 3'd0;

assign m_axi_kernel_ARQOS = 4'd0;

assign m_axi_kernel_ARREGION = 4'd0;

assign m_axi_kernel_ARSIZE = 3'd0;

assign m_axi_kernel_ARUSER = 1'd0;

assign m_axi_kernel_AWADDR = 32'd0;

assign m_axi_kernel_AWBURST = 2'd0;

assign m_axi_kernel_AWCACHE = 4'd0;

assign m_axi_kernel_AWID = 1'd0;

assign m_axi_kernel_AWLEN = 32'd0;

assign m_axi_kernel_AWLOCK = 2'd0;

assign m_axi_kernel_AWPROT = 3'd0;

assign m_axi_kernel_AWQOS = 4'd0;

assign m_axi_kernel_AWREGION = 4'd0;

assign m_axi_kernel_AWSIZE = 3'd0;

assign m_axi_kernel_AWUSER = 1'd0;

assign m_axi_kernel_AWVALID = 1'b0;

assign m_axi_kernel_BREADY = 1'b0;

assign m_axi_kernel_WDATA = 8'd0;

assign m_axi_kernel_WID = 1'd0;

assign m_axi_kernel_WLAST = 1'b0;

assign m_axi_kernel_WSTRB = 1'd0;

assign m_axi_kernel_WUSER = 1'd0;

assign m_axi_kernel_WVALID = 1'b0;

assign select_ln25_fu_158_p3 = ((icmp_ln34_fu_153_p2[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_j_load);

assign select_ln32_fu_172_p3 = ((icmp_ln34_fu_153_p2[0:0] == 1'b1) ? add_ln32_1_fu_166_p2 : i_fu_64);

assign zext_ln36_fu_218_p1 = kernel_addr_read_reg_311;

endmodule //LinearImageFilter_LinearImageFilter_Pipeline_ker_cols_sum_ker_rows_sum
