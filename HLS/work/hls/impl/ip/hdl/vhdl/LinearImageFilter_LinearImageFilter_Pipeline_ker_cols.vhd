-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LinearImageFilter_LinearImageFilter_Pipeline_ker_cols is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_image_in_AWVALID : OUT STD_LOGIC;
    m_axi_image_in_AWREADY : IN STD_LOGIC;
    m_axi_image_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WVALID : OUT STD_LOGIC;
    m_axi_image_in_WREADY : IN STD_LOGIC;
    m_axi_image_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_WLAST : OUT STD_LOGIC;
    m_axi_image_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_ARVALID : OUT STD_LOGIC;
    m_axi_image_in_ARREADY : IN STD_LOGIC;
    m_axi_image_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RVALID : IN STD_LOGIC;
    m_axi_image_in_RREADY : OUT STD_LOGIC;
    m_axi_image_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_RLAST : IN STD_LOGIC;
    m_axi_image_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_image_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BVALID : IN STD_LOGIC;
    m_axi_image_in_BREADY : OUT STD_LOGIC;
    m_axi_image_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sum : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_AWREADY : IN STD_LOGIC;
    m_axi_kernel_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_WVALID : OUT STD_LOGIC;
    m_axi_kernel_WREADY : IN STD_LOGIC;
    m_axi_kernel_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_WLAST : OUT STD_LOGIC;
    m_axi_kernel_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_ARREADY : IN STD_LOGIC;
    m_axi_kernel_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_RVALID : IN STD_LOGIC;
    m_axi_kernel_RREADY : OUT STD_LOGIC;
    m_axi_kernel_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_RLAST : IN STD_LOGIC;
    m_axi_kernel_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_kernel_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_BVALID : IN STD_LOGIC;
    m_axi_kernel_BREADY : OUT STD_LOGIC;
    m_axi_kernel_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    kernel_dim : IN STD_LOGIC_VECTOR (31 downto 0);
    padding : IN STD_LOGIC_VECTOR (7 downto 0);
    col : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_28 : IN STD_LOGIC_VECTOR (30 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_29 : IN STD_LOGIC_VECTOR (0 downto 0);
    rev : IN STD_LOGIC_VECTOR (0 downto 0);
    newRow_1 : IN STD_LOGIC_VECTOR (29 downto 0);
    empty_30 : IN STD_LOGIC_VECTOR (29 downto 0);
    empty_31 : IN STD_LOGIC_VECTOR (29 downto 0);
    image_in_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (29 downto 0);
    kernel_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    newCol_2 : IN STD_LOGIC_VECTOR (29 downto 0);
    newRow : IN STD_LOGIC_VECTOR (31 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_i : IN STD_LOGIC_VECTOR (29 downto 0);
    mul35_i : IN STD_LOGIC_VECTOR (29 downto 0);
    sum_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_2_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of LinearImageFilter_LinearImageFilter_Pipeline_ker_cols is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv30_3FFFFFFF : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal or_ln62_1_reg_774 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_1_reg_774_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op141_read_state15 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln36_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kernel_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal kernel_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln62_1_reg_774_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_predicate_pred237_state11 : BOOLEAN;
    signal image_in_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_predicate_op137_read_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_predicate_pred257_state7 : BOOLEAN;
    signal image_in_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal newCol_6_ph_reg_269 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln36_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_744_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_744_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_744_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newCol_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newCol_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln24_fu_341_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln24_reg_757 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln24_1_fu_345_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln24_1_reg_762 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_1_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op128_readreq_state7 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal or_ln62_1_reg_774_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_1_reg_774_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newRow_2_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRow_2_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_416_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln23_reg_783 : STD_LOGIC_VECTOR (29 downto 0);
    signal newCol_5_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newCol_5_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln24_3_fu_449_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln24_3_reg_794 : STD_LOGIC_VECTOR (29 downto 0);
    signal newCol_3_fu_478_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln48_4_reg_805 : STD_LOGIC_VECTOR (29 downto 0);
    signal newRow_5_fu_541_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_predicate_op114_readreq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal newCol_7_fu_568_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln48_reg_826 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln48_1_reg_831 : STD_LOGIC_VECTOR (29 downto 0);
    signal kernel_addr_read_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_addr_read_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln48_1_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln48_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_116 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln36_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_predicate_pred467_state25 : BOOLEAN;
    signal ap_sig_allocacmp_sum_1_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal p_cast_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln41_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln62_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln62_2_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln62_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRow_3_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond2_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg1_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs3_fu_430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newCol_4_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newCol_1_fu_453_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln24_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln79_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln79_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_2_fu_463_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln48_fu_485_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_2_fu_488_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln48_1_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_3_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln89_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln91_fu_531_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal xor_ln89_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newRow_4_fu_536_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln97_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln99_fu_558_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal xor_ln97_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newCol_6_fu_563_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_fu_585_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1_fu_590_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_1_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_297_ce : STD_LOGIC;
    signal grp_fu_301_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_831 : BOOLEAN;
    signal ap_condition_835 : BOOLEAN;
    signal ap_condition_839 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component LinearImageFilter_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearImageFilter_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearImageFilter_mul_30s_30s_30_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component LinearImageFilter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component LinearImageFilter_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_sum_1_load_1,
        din1 => mul_reg_862,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component LinearImageFilter_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        ce => grp_fu_297_ce,
        dout => grp_fu_297_p2);

    mul_30s_30s_30_2_1_U3 : component LinearImageFilter_mul_30s_30s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281,
        din1 => empty_31,
        ce => grp_fu_301_ce,
        dout => grp_fu_301_p2);

    flow_control_loop_pipe_sequential_init_U : component LinearImageFilter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_744 = ap_const_lv1_0))) then
                if ((ap_const_boolean_1 = ap_condition_839)) then 
                    ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269 <= trunc_ln24_reg_757;
                elsif ((ap_const_boolean_1 = ap_condition_835)) then 
                    ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269 <= newCol_7_fu_568_p3;
                elsif ((ap_const_boolean_1 = ap_condition_831)) then 
                    ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269 <= newCol_3_fu_478_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_744 = ap_const_lv1_0))) then
                if ((ap_const_boolean_1 = ap_condition_839)) then 
                    ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281 <= empty_30;
                elsif ((ap_const_boolean_1 = ap_condition_835)) then 
                    ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281 <= newRow_5_fu_541_p3;
                elsif ((ap_const_boolean_1 = ap_condition_831)) then 
                    ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281 <= newRow_1;
                end if;
            end if; 
        end if;
    end process;

    j_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_fu_116 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_reg_744 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                j_fu_116 <= add_ln36_fu_357_p2;
            end if; 
        end if;
    end process;

    sum_1_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_1_fu_120 <= sum;
            elsif (((ap_predicate_pred467_state25 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                sum_1_fu_120 <= sum_2_reg_872;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                    ap_predicate_pred237_state11 <= ((or_ln62_1_reg_774_pp0_iter1_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
                image_in_addr_read_reg_847 <= m_axi_image_in_RDATA;
                mul_ln48_reg_826 <= grp_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    ap_predicate_pred257_state7 <= ((or_ln62_1_reg_774 = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
                icmp_ln36_reg_744 <= icmp_ln36_fu_323_p2;
                icmp_ln36_reg_744_pp0_iter1_reg <= icmp_ln36_reg_744;
                icmp_ln36_reg_744_pp0_iter2_reg <= icmp_ln36_reg_744_pp0_iter1_reg;
                icmp_ln36_reg_744_pp0_iter3_reg <= icmp_ln36_reg_744_pp0_iter2_reg;
                j_1_reg_738 <= ap_sig_allocacmp_j_1;
                kernel_addr_read_reg_842 <= m_axi_kernel_RDATA;
                newCol_reg_748 <= newCol_fu_335_p2;
                tmp_5_reg_767 <= newCol_fu_335_p2(31 downto 31);
                trunc_ln24_1_reg_762 <= trunc_ln24_1_fu_345_p1;
                trunc_ln24_reg_757 <= trunc_ln24_fu_341_p1;
                trunc_ln48_1_reg_831 <= add_ln48_1_fu_598_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                    ap_predicate_pred467_state25 <= ((or_ln62_1_reg_774_pp0_iter4_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
                mul_reg_862 <= grp_fu_297_p2;
                sum_2_reg_872 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                newCol_5_reg_789 <= newCol_5_fu_443_p3;
                newRow_2_reg_778 <= newRow_2_fu_410_p3;
                or_ln62_1_reg_774 <= or_ln62_1_fu_381_p2;
                or_ln62_1_reg_774_pp0_iter1_reg <= or_ln62_1_reg_774;
                or_ln62_1_reg_774_pp0_iter2_reg <= or_ln62_1_reg_774_pp0_iter1_reg;
                or_ln62_1_reg_774_pp0_iter3_reg <= or_ln62_1_reg_774_pp0_iter2_reg;
                or_ln62_1_reg_774_pp0_iter4_reg <= or_ln62_1_reg_774_pp0_iter3_reg;
                trunc_ln23_reg_783 <= trunc_ln23_fu_416_p1;
                trunc_ln24_3_reg_794 <= trunc_ln24_3_fu_449_p1;
                trunc_ln48_4_reg_805 <= add_ln48_3_fu_501_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                newCol_6_ph_reg_269 <= ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_done_pending_pp0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    abs3_fu_430_p3 <= 
        newCol_reg_748 when (abscond2_fu_425_p2(0) = '1') else 
        neg1_fu_420_p2;
    abs_fu_397_p3 <= 
        newRow when (abscond_fu_392_p2(0) = '1') else 
        neg_fu_387_p2;
    abscond2_fu_425_p2 <= "1" when (signed(newCol_reg_748) > signed(ap_const_lv32_0)) else "0";
    abscond_fu_392_p2 <= "1" when (signed(newRow) > signed(ap_const_lv32_0)) else "0";
    add_ln36_fu_357_p2 <= std_logic_vector(unsigned(j_1_reg_738) + unsigned(ap_const_lv32_1));
    add_ln48_1_fu_598_p2 <= std_logic_vector(unsigned(shl_ln1_fu_590_p3) + unsigned(image_in_offset));
    add_ln48_2_fu_488_p2 <= std_logic_vector(unsigned(trunc_ln48_fu_485_p1) + unsigned(empty));
    add_ln48_3_fu_501_p2 <= std_logic_vector(unsigned(shl_ln48_1_fu_493_p3) + unsigned(kernel_offset));
    add_ln48_fu_585_p2 <= std_logic_vector(unsigned(mul_ln48_reg_826) + unsigned(newCol_6_ph_reg_269));
    add_ln91_fu_531_p2 <= std_logic_vector(unsigned(mul_i) + unsigned(ap_const_lv30_3FFFFFFF));
    add_ln99_fu_558_p2 <= std_logic_vector(unsigned(mul35_i) + unsigned(ap_const_lv30_3FFFFFFF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state11_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter2));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state11_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter2));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state7_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state7_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_io));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state15_pp0_stage4_iter2)
    begin
                ap_block_pp0_stage4_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_pp0_stage4_iter2));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state15_pp0_stage4_iter2)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_pp0_stage4_iter2));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state15_pp0_stage4_iter2)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_pp0_stage4_iter2));
    end process;


    ap_block_state11_pp0_stage0_iter2_assign_proc : process(m_axi_kernel_RVALID, ap_predicate_op137_read_state11)
    begin
                ap_block_state11_pp0_stage0_iter2 <= ((ap_predicate_op137_read_state11 = ap_const_boolean_1) and (m_axi_kernel_RVALID = ap_const_logic_0));
    end process;


    ap_block_state15_pp0_stage4_iter2_assign_proc : process(m_axi_image_in_RVALID, ap_predicate_op141_read_state15)
    begin
                ap_block_state15_pp0_stage4_iter2 <= ((m_axi_image_in_RVALID = ap_const_logic_0) and (ap_predicate_op141_read_state15 = ap_const_boolean_1));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_kernel_ARREADY, ap_predicate_op114_readreq_state3)
    begin
                ap_block_state3_io <= ((ap_predicate_op114_readreq_state3 = ap_const_boolean_1) and (m_axi_kernel_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(m_axi_image_in_ARREADY, ap_predicate_op128_readreq_state7)
    begin
                ap_block_state7_io <= ((m_axi_image_in_ARREADY = ap_const_logic_0) and (ap_predicate_op128_readreq_state7 = ap_const_boolean_1));
    end process;


    ap_condition_831_assign_proc : process(padding, ap_CS_fsm_pp0_stage1, or_ln62_1_fu_381_p2, ap_block_pp0_stage1_11001)
    begin
                ap_condition_831 <= ((or_ln62_1_fu_381_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (padding = ap_const_lv8_1));
    end process;


    ap_condition_835_assign_proc : process(or_ln62_1_reg_774, padding, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
                ap_condition_835 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (or_ln62_1_reg_774 = ap_const_lv1_1) and (padding = ap_const_lv8_2));
    end process;


    ap_condition_839_assign_proc : process(ap_CS_fsm_pp0_stage1, or_ln62_1_fu_381_p2, ap_block_pp0_stage1_11001)
    begin
                ap_condition_839 <= ((or_ln62_1_fu_381_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln36_reg_744)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln36_reg_744 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_predicate_op114_readreq_state3_assign_proc : process(or_ln62_1_reg_774, icmp_ln36_reg_744, padding)
    begin
                ap_predicate_op114_readreq_state3 <= ((((icmp_ln36_reg_744 = ap_const_lv1_0) and (padding = ap_const_lv8_1)) or ((icmp_ln36_reg_744 = ap_const_lv1_0) and (padding = ap_const_lv8_2))) or ((icmp_ln36_reg_744 = ap_const_lv1_0) and (or_ln62_1_reg_774 = ap_const_lv1_0)));
    end process;


    ap_predicate_op128_readreq_state7_assign_proc : process(or_ln62_1_reg_774, padding)
    begin
                ap_predicate_op128_readreq_state7 <= ((or_ln62_1_reg_774 = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
    end process;


    ap_predicate_op137_read_state11_assign_proc : process(padding, or_ln62_1_reg_774_pp0_iter1_reg)
    begin
                ap_predicate_op137_read_state11 <= ((or_ln62_1_reg_774_pp0_iter1_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
    end process;


    ap_predicate_op141_read_state15_assign_proc : process(or_ln62_1_reg_774_pp0_iter2_reg, padding)
    begin
                ap_predicate_op141_read_state15 <= ((or_ln62_1_reg_774_pp0_iter2_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_116, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_sum_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, sum_2_reg_872, sum_1_fu_120, ap_predicate_pred467_state25)
    begin
        if (((ap_predicate_pred467_state25 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            ap_sig_allocacmp_sum_1_load_1 <= sum_2_reg_872;
        else 
            ap_sig_allocacmp_sum_1_load_1 <= sum_1_fu_120;
        end if; 
    end process;


    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_293_ce <= ap_const_logic_1;
        else 
            grp_fu_293_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_297_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_297_ce <= ap_const_logic_1;
        else 
            grp_fu_297_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_297_p0 <= image_in_addr_read_reg_847;
    grp_fu_297_p1 <= kernel_addr_read_reg_842;

    grp_fu_301_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            grp_fu_301_ce <= ap_const_logic_1;
        else 
            grp_fu_301_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln36_fu_323_p2 <= "1" when (ap_sig_allocacmp_j_1 = kernel_dim) else "0";
    icmp_ln62_fu_362_p2 <= "1" when (unsigned(newCol_reg_748) < unsigned(cols)) else "0";
    icmp_ln79_fu_467_p2 <= "1" when (unsigned(zext_ln24_fu_459_p1) < unsigned(cols)) else "0";
    icmp_ln89_fu_521_p2 <= "1" when (unsigned(newRow_2_reg_778) < unsigned(rows)) else "0";
    icmp_ln97_fu_548_p2 <= "1" when (unsigned(newCol_5_reg_789) < unsigned(cols)) else "0";

    image_in_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_image_in_ARREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_predicate_pred257_state7)
    begin
        if (((ap_predicate_pred257_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            image_in_blk_n_AR <= m_axi_image_in_ARREADY;
        else 
            image_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    image_in_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, m_axi_image_in_RVALID, ap_predicate_op141_read_state15, ap_block_pp0_stage4)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_predicate_op141_read_state15 = ap_const_boolean_1))) then 
            image_in_blk_n_R <= m_axi_image_in_RVALID;
        else 
            image_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    kernel_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, or_ln62_1_reg_774, icmp_ln36_reg_744, m_axi_kernel_ARREADY, padding, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and ((((icmp_ln36_reg_744 = ap_const_lv1_0) and (padding = ap_const_lv8_1)) or ((icmp_ln36_reg_744 = ap_const_lv1_0) and (padding = ap_const_lv8_2))) or ((icmp_ln36_reg_744 = ap_const_lv1_0) and (or_ln62_1_reg_774 = ap_const_lv1_0))))) then 
            kernel_blk_n_AR <= m_axi_kernel_ARREADY;
        else 
            kernel_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    kernel_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, m_axi_kernel_RVALID, ap_block_pp0_stage0, ap_predicate_pred237_state11)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_pred237_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            kernel_blk_n_R <= m_axi_kernel_RVALID;
        else 
            kernel_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_image_in_ARADDR <= sext_ln48_fu_613_p1;
    m_axi_image_in_ARBURST <= ap_const_lv2_0;
    m_axi_image_in_ARCACHE <= ap_const_lv4_0;
    m_axi_image_in_ARID <= ap_const_lv1_0;
    m_axi_image_in_ARLEN <= ap_const_lv32_1;
    m_axi_image_in_ARLOCK <= ap_const_lv2_0;
    m_axi_image_in_ARPROT <= ap_const_lv3_0;
    m_axi_image_in_ARQOS <= ap_const_lv4_0;
    m_axi_image_in_ARREGION <= ap_const_lv4_0;
    m_axi_image_in_ARSIZE <= ap_const_lv3_0;
    m_axi_image_in_ARUSER <= ap_const_lv1_0;

    m_axi_image_in_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_predicate_op128_readreq_state7, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op128_readreq_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_image_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_image_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_AWADDR <= ap_const_lv32_0;
    m_axi_image_in_AWBURST <= ap_const_lv2_0;
    m_axi_image_in_AWCACHE <= ap_const_lv4_0;
    m_axi_image_in_AWID <= ap_const_lv1_0;
    m_axi_image_in_AWLEN <= ap_const_lv32_0;
    m_axi_image_in_AWLOCK <= ap_const_lv2_0;
    m_axi_image_in_AWPROT <= ap_const_lv3_0;
    m_axi_image_in_AWQOS <= ap_const_lv4_0;
    m_axi_image_in_AWREGION <= ap_const_lv4_0;
    m_axi_image_in_AWSIZE <= ap_const_lv3_0;
    m_axi_image_in_AWUSER <= ap_const_lv1_0;
    m_axi_image_in_AWVALID <= ap_const_logic_0;
    m_axi_image_in_BREADY <= ap_const_logic_0;

    m_axi_image_in_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_predicate_op141_read_state15, ap_block_pp0_stage4_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_predicate_op141_read_state15 = ap_const_boolean_1))) then 
            m_axi_image_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_image_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_WDATA <= ap_const_lv32_0;
    m_axi_image_in_WID <= ap_const_lv1_0;
    m_axi_image_in_WLAST <= ap_const_logic_0;
    m_axi_image_in_WSTRB <= ap_const_lv4_0;
    m_axi_image_in_WUSER <= ap_const_lv1_0;
    m_axi_image_in_WVALID <= ap_const_logic_0;
    m_axi_kernel_ARADDR <= sext_ln48_1_fu_575_p1;
    m_axi_kernel_ARBURST <= ap_const_lv2_0;
    m_axi_kernel_ARCACHE <= ap_const_lv4_0;
    m_axi_kernel_ARID <= ap_const_lv1_0;
    m_axi_kernel_ARLEN <= ap_const_lv32_1;
    m_axi_kernel_ARLOCK <= ap_const_lv2_0;
    m_axi_kernel_ARPROT <= ap_const_lv3_0;
    m_axi_kernel_ARQOS <= ap_const_lv4_0;
    m_axi_kernel_ARREGION <= ap_const_lv4_0;
    m_axi_kernel_ARSIZE <= ap_const_lv3_0;
    m_axi_kernel_ARUSER <= ap_const_lv1_0;

    m_axi_kernel_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_predicate_op114_readreq_state3, ap_block_pp0_stage2_11001)
    begin
        if (((ap_predicate_op114_readreq_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            m_axi_kernel_ARVALID <= ap_const_logic_1;
        else 
            m_axi_kernel_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kernel_AWADDR <= ap_const_lv32_0;
    m_axi_kernel_AWBURST <= ap_const_lv2_0;
    m_axi_kernel_AWCACHE <= ap_const_lv4_0;
    m_axi_kernel_AWID <= ap_const_lv1_0;
    m_axi_kernel_AWLEN <= ap_const_lv32_0;
    m_axi_kernel_AWLOCK <= ap_const_lv2_0;
    m_axi_kernel_AWPROT <= ap_const_lv3_0;
    m_axi_kernel_AWQOS <= ap_const_lv4_0;
    m_axi_kernel_AWREGION <= ap_const_lv4_0;
    m_axi_kernel_AWSIZE <= ap_const_lv3_0;
    m_axi_kernel_AWUSER <= ap_const_lv1_0;
    m_axi_kernel_AWVALID <= ap_const_logic_0;
    m_axi_kernel_BREADY <= ap_const_logic_0;

    m_axi_kernel_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_predicate_op137_read_state11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op137_read_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_kernel_RREADY <= ap_const_logic_1;
        else 
            m_axi_kernel_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kernel_WDATA <= ap_const_lv32_0;
    m_axi_kernel_WID <= ap_const_lv1_0;
    m_axi_kernel_WLAST <= ap_const_logic_0;
    m_axi_kernel_WSTRB <= ap_const_lv4_0;
    m_axi_kernel_WUSER <= ap_const_lv1_0;
    m_axi_kernel_WVALID <= ap_const_logic_0;
    neg1_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(newCol_reg_748));
    neg_fu_387_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(newRow));
    newCol_1_fu_453_p3 <= 
        ap_const_lv31_0 when (tmp_5_reg_767(0) = '1') else 
        trunc_ln24_1_reg_762;
    newCol_3_fu_478_p3 <= 
        newCol_2 when (xor_ln79_fu_472_p2(0) = '1') else 
        trunc_ln24_2_fu_463_p1;
    newCol_4_fu_437_p2 <= std_logic_vector(unsigned(abs3_fu_430_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    newCol_5_fu_443_p3 <= 
        newCol_4_fu_437_p2 when (tmp_5_reg_767(0) = '1') else 
        newCol_reg_748;
    newCol_6_fu_563_p2 <= std_logic_vector(unsigned(add_ln99_fu_558_p2) - unsigned(trunc_ln24_3_reg_794));
    newCol_7_fu_568_p3 <= 
        newCol_6_fu_563_p2 when (xor_ln97_fu_552_p2(0) = '1') else 
        trunc_ln24_3_reg_794;
    newCol_fu_335_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(sub_ln41_fu_329_p2));
    newRow_2_fu_410_p3 <= 
        newRow_3_fu_404_p2 when (empty_29(0) = '1') else 
        newRow;
    newRow_3_fu_404_p2 <= std_logic_vector(unsigned(abs_fu_397_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    newRow_4_fu_536_p2 <= std_logic_vector(unsigned(add_ln91_fu_531_p2) - unsigned(trunc_ln23_reg_783));
    newRow_5_fu_541_p3 <= 
        newRow_4_fu_536_p2 when (xor_ln89_fu_525_p2(0) = '1') else 
        trunc_ln23_reg_783;
    or_ln62_1_fu_381_p2 <= (xor_ln62_fu_366_p2 or or_ln62_2_fu_376_p2);
    or_ln62_2_fu_376_p2 <= (tmp_5_reg_767 or or_ln62_fu_372_p2);
    or_ln62_fu_372_p2 <= (rev or empty_29);
    p_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_28),32));
        sext_ln48_1_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln48_4_reg_805),32));

        sext_ln48_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln48_1_reg_831),32));

    shl_ln1_fu_590_p3 <= (add_ln48_fu_585_p2 & ap_const_lv2_0);
    shl_ln48_1_fu_493_p3 <= (add_ln48_2_fu_488_p2 & ap_const_lv2_0);
    sub_ln41_fu_329_p2 <= std_logic_vector(unsigned(col) - unsigned(p_cast_fu_306_p1));
    sum_2_out <= sum_1_fu_120;

    sum_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, icmp_ln36_reg_744_pp0_iter3_reg)
    begin
        if (((icmp_ln36_reg_744_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            sum_2_out_ap_vld <= ap_const_logic_1;
        else 
            sum_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_reg_721 <= empty_29;
    trunc_ln23_fu_416_p1 <= newRow_2_fu_410_p3(30 - 1 downto 0);
    trunc_ln24_1_fu_345_p1 <= newCol_fu_335_p2(31 - 1 downto 0);
    trunc_ln24_2_fu_463_p1 <= newCol_1_fu_453_p3(30 - 1 downto 0);
    trunc_ln24_3_fu_449_p1 <= newCol_5_fu_443_p3(30 - 1 downto 0);
    trunc_ln24_fu_341_p1 <= newCol_fu_335_p2(30 - 1 downto 0);
    trunc_ln48_fu_485_p1 <= j_1_reg_738(30 - 1 downto 0);
    xor_ln62_fu_366_p2 <= (icmp_ln62_fu_362_p2 xor ap_const_lv1_1);
    xor_ln79_fu_472_p2 <= (icmp_ln79_fu_467_p2 xor ap_const_lv1_1);
    xor_ln89_fu_525_p2 <= (icmp_ln89_fu_521_p2 xor ap_const_lv1_1);
    xor_ln97_fu_552_p2 <= (icmp_ln97_fu_548_p2 xor ap_const_lv1_1);
    zext_ln24_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newCol_1_fu_453_p3),32));
end behav;
