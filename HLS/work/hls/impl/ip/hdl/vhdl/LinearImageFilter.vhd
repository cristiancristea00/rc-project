-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LinearImageFilter is
generic (
    C_M_AXI_IMAGE_OUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_OUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_OUT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMAGE_IN_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_KERNEL_ID_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_KERNEL_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KERNEL_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMAGE_IN_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_IN_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IMAGE_OUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMAGE_OUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_KERNEL_USER_VALUE : INTEGER := 0;
    C_M_AXI_KERNEL_PROT_VALUE : INTEGER := 0;
    C_M_AXI_KERNEL_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_image_out_AWVALID : OUT STD_LOGIC;
    m_axi_image_out_AWREADY : IN STD_LOGIC;
    m_axi_image_out_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_image_out_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_image_out_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_image_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_AWUSER_WIDTH-1 downto 0);
    m_axi_image_out_WVALID : OUT STD_LOGIC;
    m_axi_image_out_WREADY : IN STD_LOGIC;
    m_axi_image_out_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH-1 downto 0);
    m_axi_image_out_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH/8-1 downto 0);
    m_axi_image_out_WLAST : OUT STD_LOGIC;
    m_axi_image_out_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_image_out_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_WUSER_WIDTH-1 downto 0);
    m_axi_image_out_ARVALID : OUT STD_LOGIC;
    m_axi_image_out_ARREADY : IN STD_LOGIC;
    m_axi_image_out_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_image_out_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_image_out_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_image_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ARUSER_WIDTH-1 downto 0);
    m_axi_image_out_RVALID : IN STD_LOGIC;
    m_axi_image_out_RREADY : OUT STD_LOGIC;
    m_axi_image_out_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_DATA_WIDTH-1 downto 0);
    m_axi_image_out_RLAST : IN STD_LOGIC;
    m_axi_image_out_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_image_out_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_RUSER_WIDTH-1 downto 0);
    m_axi_image_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_BVALID : IN STD_LOGIC;
    m_axi_image_out_BREADY : OUT STD_LOGIC;
    m_axi_image_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_ID_WIDTH-1 downto 0);
    m_axi_image_out_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_OUT_BUSER_WIDTH-1 downto 0);
    m_axi_image_in_AWVALID : OUT STD_LOGIC;
    m_axi_image_in_AWREADY : IN STD_LOGIC;
    m_axi_image_in_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ADDR_WIDTH-1 downto 0);
    m_axi_image_in_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_image_in_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_image_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_AWUSER_WIDTH-1 downto 0);
    m_axi_image_in_WVALID : OUT STD_LOGIC;
    m_axi_image_in_WREADY : IN STD_LOGIC;
    m_axi_image_in_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_DATA_WIDTH-1 downto 0);
    m_axi_image_in_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_DATA_WIDTH/8-1 downto 0);
    m_axi_image_in_WLAST : OUT STD_LOGIC;
    m_axi_image_in_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_image_in_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_WUSER_WIDTH-1 downto 0);
    m_axi_image_in_ARVALID : OUT STD_LOGIC;
    m_axi_image_in_ARREADY : IN STD_LOGIC;
    m_axi_image_in_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ADDR_WIDTH-1 downto 0);
    m_axi_image_in_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_image_in_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_image_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ARUSER_WIDTH-1 downto 0);
    m_axi_image_in_RVALID : IN STD_LOGIC;
    m_axi_image_in_RREADY : OUT STD_LOGIC;
    m_axi_image_in_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_DATA_WIDTH-1 downto 0);
    m_axi_image_in_RLAST : IN STD_LOGIC;
    m_axi_image_in_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_image_in_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_RUSER_WIDTH-1 downto 0);
    m_axi_image_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BVALID : IN STD_LOGIC;
    m_axi_image_in_BREADY : OUT STD_LOGIC;
    m_axi_image_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_ID_WIDTH-1 downto 0);
    m_axi_image_in_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMAGE_IN_BUSER_WIDTH-1 downto 0);
    m_axi_kernel_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_AWREADY : IN STD_LOGIC;
    m_axi_kernel_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_ADDR_WIDTH-1 downto 0);
    m_axi_kernel_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_ID_WIDTH-1 downto 0);
    m_axi_kernel_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kernel_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_AWUSER_WIDTH-1 downto 0);
    m_axi_kernel_WVALID : OUT STD_LOGIC;
    m_axi_kernel_WREADY : IN STD_LOGIC;
    m_axi_kernel_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_DATA_WIDTH-1 downto 0);
    m_axi_kernel_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_DATA_WIDTH/8-1 downto 0);
    m_axi_kernel_WLAST : OUT STD_LOGIC;
    m_axi_kernel_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_ID_WIDTH-1 downto 0);
    m_axi_kernel_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_WUSER_WIDTH-1 downto 0);
    m_axi_kernel_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_ARREADY : IN STD_LOGIC;
    m_axi_kernel_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_ADDR_WIDTH-1 downto 0);
    m_axi_kernel_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_ID_WIDTH-1 downto 0);
    m_axi_kernel_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kernel_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KERNEL_ARUSER_WIDTH-1 downto 0);
    m_axi_kernel_RVALID : IN STD_LOGIC;
    m_axi_kernel_RREADY : OUT STD_LOGIC;
    m_axi_kernel_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_DATA_WIDTH-1 downto 0);
    m_axi_kernel_RLAST : IN STD_LOGIC;
    m_axi_kernel_RID : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_ID_WIDTH-1 downto 0);
    m_axi_kernel_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_RUSER_WIDTH-1 downto 0);
    m_axi_kernel_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_BVALID : IN STD_LOGIC;
    m_axi_kernel_BREADY : OUT STD_LOGIC;
    m_axi_kernel_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_BID : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_ID_WIDTH-1 downto 0);
    m_axi_kernel_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KERNEL_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of LinearImageFilter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LinearImageFilter_LinearImageFilter,hls_ip_2023_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=7020,HLS_SYN_LUT=7027,HLS_VERSION=2023_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (85 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (85 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (85 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (85 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (85 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (85 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (85 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (85 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (85 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (85 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (85 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_3FFFFFFF : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111111111111111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_out_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_size_r : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_row : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_col : STD_LOGIC_VECTOR (31 downto 0);
    signal padding : STD_LOGIC_VECTOR (7 downto 0);
    signal image_out_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal image_out_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal image_out_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal stride_col_read_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_row_read_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_size_read_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_offset_read_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_read_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_read_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_offset_read_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out_offset_read_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_239_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln7_reg_464 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln7_1_fu_243_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln7_1_reg_469 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln7_2_fu_247_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln7_2_reg_475 : STD_LOGIC_VECTOR (29 downto 0);
    signal div_reg_480 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_fu_261_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_reg_486 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_42_fu_265_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_42_reg_491 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln7_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal div_cast_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_cast_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_i_fu_282_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_i_reg_507 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub16_i_fu_287_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub16_i_reg_512 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_i_fu_292_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_i_reg_517 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul35_i_fu_299_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul35_i_reg_522 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln7_reg_527 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_1_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_1_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln43_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal udiv_ln43_2_reg_558 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal add_ln43_fu_358_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln43_reg_568 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal trunc_ln43_2_reg_573 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_done : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_idle : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_ready : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWVALID : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WVALID : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WLAST : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARVALID : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_RREADY : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_BREADY : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWVALID : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WVALID : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WLAST : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARVALID : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_RREADY : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_BREADY : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_sum_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_sum_1_out_ap_vld : STD_LOGIC;
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_ce : STD_LOGIC;
    signal image_in_AWREADY : STD_LOGIC;
    signal image_in_WREADY : STD_LOGIC;
    signal image_in_ARVALID : STD_LOGIC;
    signal image_in_ARREADY : STD_LOGIC;
    signal image_in_RVALID : STD_LOGIC;
    signal image_in_RREADY : STD_LOGIC;
    signal image_in_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal image_in_BVALID : STD_LOGIC;
    signal image_out_AWVALID : STD_LOGIC;
    signal image_out_AWREADY : STD_LOGIC;
    signal image_out_WVALID : STD_LOGIC;
    signal image_out_WREADY : STD_LOGIC;
    signal image_out_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out_ARREADY : STD_LOGIC;
    signal image_out_RVALID : STD_LOGIC;
    signal image_out_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal image_out_BVALID : STD_LOGIC;
    signal image_out_BREADY : STD_LOGIC;
    signal kernel_AWREADY : STD_LOGIC;
    signal kernel_WREADY : STD_LOGIC;
    signal kernel_ARVALID : STD_LOGIC;
    signal kernel_ARREADY : STD_LOGIC;
    signal kernel_RVALID : STD_LOGIC;
    signal kernel_RREADY : STD_LOGIC;
    signal kernel_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_BVALID : STD_LOGIC;
    signal col_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln21_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln23_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sext_ln43_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_fu_116 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal row_3_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal trunc_ln7_1_fu_243_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_42_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln43_1_fu_355_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln43_fu_351_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln_fu_364_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_1_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_ce : STD_LOGIC;
    signal grp_fu_324_ap_start : STD_LOGIC;
    signal grp_fu_324_ap_done : STD_LOGIC;
    signal grp_fu_324_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_328_ap_start : STD_LOGIC;
    signal grp_fu_328_ap_done : STD_LOGIC;
    signal grp_fu_328_ce : STD_LOGIC;
    signal grp_fu_347_ap_start : STD_LOGIC;
    signal grp_fu_347_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LinearImageFilter_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_kernel_AWVALID : OUT STD_LOGIC;
        m_axi_kernel_AWREADY : IN STD_LOGIC;
        m_axi_kernel_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_WVALID : OUT STD_LOGIC;
        m_axi_kernel_WREADY : IN STD_LOGIC;
        m_axi_kernel_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_WLAST : OUT STD_LOGIC;
        m_axi_kernel_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_ARVALID : OUT STD_LOGIC;
        m_axi_kernel_ARREADY : IN STD_LOGIC;
        m_axi_kernel_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_kernel_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_kernel_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_RVALID : IN STD_LOGIC;
        m_axi_kernel_RREADY : OUT STD_LOGIC;
        m_axi_kernel_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_kernel_RLAST : IN STD_LOGIC;
        m_axi_kernel_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_kernel_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_BVALID : IN STD_LOGIC;
        m_axi_kernel_BREADY : OUT STD_LOGIC;
        m_axi_kernel_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_kernel_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_kernel_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_AWVALID : OUT STD_LOGIC;
        m_axi_image_in_AWREADY : IN STD_LOGIC;
        m_axi_image_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_image_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_image_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_image_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_image_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_image_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_image_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_image_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_image_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_image_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_WVALID : OUT STD_LOGIC;
        m_axi_image_in_WREADY : IN STD_LOGIC;
        m_axi_image_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_image_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_image_in_WLAST : OUT STD_LOGIC;
        m_axi_image_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_ARVALID : OUT STD_LOGIC;
        m_axi_image_in_ARREADY : IN STD_LOGIC;
        m_axi_image_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_image_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_image_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_image_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_image_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_image_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_image_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_image_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_image_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_image_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_RVALID : IN STD_LOGIC;
        m_axi_image_in_RREADY : OUT STD_LOGIC;
        m_axi_image_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_image_in_RLAST : IN STD_LOGIC;
        m_axi_image_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_image_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_image_in_BVALID : IN STD_LOGIC;
        m_axi_image_in_BREADY : OUT STD_LOGIC;
        m_axi_image_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_image_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_image_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mul_ln7 : IN STD_LOGIC_VECTOR (63 downto 0);
        empty_26 : IN STD_LOGIC_VECTOR (2 downto 0);
        kernel_size_r : IN STD_LOGIC_VECTOR (31 downto 0);
        add : IN STD_LOGIC_VECTOR (31 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        sub_i : IN STD_LOGIC_VECTOR (29 downto 0);
        col : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_27 : IN STD_LOGIC_VECTOR (30 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (29 downto 0);
        image_in_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        sub16_i : IN STD_LOGIC_VECTOR (29 downto 0);
        mul_i : IN STD_LOGIC_VECTOR (29 downto 0);
        mul35_i : IN STD_LOGIC_VECTOR (29 downto 0);
        sum_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_1_out_ap_vld : OUT STD_LOGIC;
        grp_fu_235_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_235_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_235_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_235_p_ce : OUT STD_LOGIC );
    end component;


    component LinearImageFilter_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LinearImageFilter_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearImageFilter_udiv_32ns_32ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearImageFilter_udiv_32ns_32ns_30_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component LinearImageFilter_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        image_out_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_in_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_size_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        stride_row : OUT STD_LOGIC_VECTOR (31 downto 0);
        stride_col : OUT STD_LOGIC_VECTOR (31 downto 0);
        padding : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component LinearImageFilter_image_in_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component LinearImageFilter_image_out_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component LinearImageFilter_kernel_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206 : component LinearImageFilter_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start,
        ap_done => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_done,
        ap_idle => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_idle,
        ap_ready => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_ready,
        m_axi_kernel_AWVALID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWVALID,
        m_axi_kernel_AWREADY => ap_const_logic_0,
        m_axi_kernel_AWADDR => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWADDR,
        m_axi_kernel_AWID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWID,
        m_axi_kernel_AWLEN => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWLEN,
        m_axi_kernel_AWSIZE => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWSIZE,
        m_axi_kernel_AWBURST => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWBURST,
        m_axi_kernel_AWLOCK => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWLOCK,
        m_axi_kernel_AWCACHE => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWCACHE,
        m_axi_kernel_AWPROT => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWPROT,
        m_axi_kernel_AWQOS => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWQOS,
        m_axi_kernel_AWREGION => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWREGION,
        m_axi_kernel_AWUSER => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_AWUSER,
        m_axi_kernel_WVALID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WVALID,
        m_axi_kernel_WREADY => ap_const_logic_0,
        m_axi_kernel_WDATA => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WDATA,
        m_axi_kernel_WSTRB => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WSTRB,
        m_axi_kernel_WLAST => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WLAST,
        m_axi_kernel_WID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WID,
        m_axi_kernel_WUSER => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_WUSER,
        m_axi_kernel_ARVALID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARVALID,
        m_axi_kernel_ARREADY => kernel_ARREADY,
        m_axi_kernel_ARADDR => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARADDR,
        m_axi_kernel_ARID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARID,
        m_axi_kernel_ARLEN => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARLEN,
        m_axi_kernel_ARSIZE => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARSIZE,
        m_axi_kernel_ARBURST => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARBURST,
        m_axi_kernel_ARLOCK => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARLOCK,
        m_axi_kernel_ARCACHE => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARCACHE,
        m_axi_kernel_ARPROT => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARPROT,
        m_axi_kernel_ARQOS => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARQOS,
        m_axi_kernel_ARREGION => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARREGION,
        m_axi_kernel_ARUSER => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARUSER,
        m_axi_kernel_RVALID => kernel_RVALID,
        m_axi_kernel_RREADY => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_RREADY,
        m_axi_kernel_RDATA => kernel_RDATA,
        m_axi_kernel_RLAST => ap_const_logic_0,
        m_axi_kernel_RID => ap_const_lv1_0,
        m_axi_kernel_RFIFONUM => kernel_RFIFONUM,
        m_axi_kernel_RUSER => ap_const_lv1_0,
        m_axi_kernel_RRESP => ap_const_lv2_0,
        m_axi_kernel_BVALID => ap_const_logic_0,
        m_axi_kernel_BREADY => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_BREADY,
        m_axi_kernel_BRESP => ap_const_lv2_0,
        m_axi_kernel_BID => ap_const_lv1_0,
        m_axi_kernel_BUSER => ap_const_lv1_0,
        m_axi_image_in_AWVALID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWVALID,
        m_axi_image_in_AWREADY => ap_const_logic_0,
        m_axi_image_in_AWADDR => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWADDR,
        m_axi_image_in_AWID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWID,
        m_axi_image_in_AWLEN => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWLEN,
        m_axi_image_in_AWSIZE => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWSIZE,
        m_axi_image_in_AWBURST => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWBURST,
        m_axi_image_in_AWLOCK => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWLOCK,
        m_axi_image_in_AWCACHE => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWCACHE,
        m_axi_image_in_AWPROT => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWPROT,
        m_axi_image_in_AWQOS => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWQOS,
        m_axi_image_in_AWREGION => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWREGION,
        m_axi_image_in_AWUSER => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_AWUSER,
        m_axi_image_in_WVALID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WVALID,
        m_axi_image_in_WREADY => ap_const_logic_0,
        m_axi_image_in_WDATA => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WDATA,
        m_axi_image_in_WSTRB => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WSTRB,
        m_axi_image_in_WLAST => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WLAST,
        m_axi_image_in_WID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WID,
        m_axi_image_in_WUSER => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_WUSER,
        m_axi_image_in_ARVALID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARVALID,
        m_axi_image_in_ARREADY => image_in_ARREADY,
        m_axi_image_in_ARADDR => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARADDR,
        m_axi_image_in_ARID => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARID,
        m_axi_image_in_ARLEN => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARLEN,
        m_axi_image_in_ARSIZE => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARSIZE,
        m_axi_image_in_ARBURST => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARBURST,
        m_axi_image_in_ARLOCK => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARLOCK,
        m_axi_image_in_ARCACHE => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARCACHE,
        m_axi_image_in_ARPROT => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARPROT,
        m_axi_image_in_ARQOS => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARQOS,
        m_axi_image_in_ARREGION => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARREGION,
        m_axi_image_in_ARUSER => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARUSER,
        m_axi_image_in_RVALID => image_in_RVALID,
        m_axi_image_in_RREADY => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_RREADY,
        m_axi_image_in_RDATA => image_in_RDATA,
        m_axi_image_in_RLAST => ap_const_logic_0,
        m_axi_image_in_RID => ap_const_lv1_0,
        m_axi_image_in_RFIFONUM => image_in_RFIFONUM,
        m_axi_image_in_RUSER => ap_const_lv1_0,
        m_axi_image_in_RRESP => ap_const_lv2_0,
        m_axi_image_in_BVALID => ap_const_logic_0,
        m_axi_image_in_BREADY => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_BREADY,
        m_axi_image_in_BRESP => ap_const_lv2_0,
        m_axi_image_in_BID => ap_const_lv1_0,
        m_axi_image_in_BUSER => ap_const_lv1_0,
        mul_ln7 => mul_ln7_reg_527,
        empty_26 => trunc_ln7_reg_464,
        kernel_size_r => kernel_size_read_reg_424,
        add => add_reg_540,
        rows => rows_read_reg_442,
        sub_i => sub_i_reg_507,
        col => col_reg_194,
        empty_27 => div_reg_480,
        cols => cols_read_reg_435,
        empty => trunc_ln7_1_reg_469,
        image_in_offset => image_in_offset_read_reg_448,
        kernel_offset => kernel_offset_read_reg_430,
        sub16_i => sub16_i_reg_512,
        mul_i => mul_i_reg_517,
        mul35_i => mul35_i_reg_522,
        sum_1_out => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_sum_1_out,
        sum_1_out_ap_vld => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_sum_1_out_ap_vld,
        grp_fu_235_p_din0 => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_din0,
        grp_fu_235_p_din1 => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_din1,
        grp_fu_235_p_dout0 => grp_fu_235_p2,
        grp_fu_235_p_ce => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_ce);

    control_s_axi_U : component LinearImageFilter_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        image_out_offset => image_out_offset,
        image_in_offset => image_in_offset,
        rows => rows,
        cols => cols,
        kernel_offset => kernel_offset,
        kernel_size_r => kernel_size_r,
        stride_row => stride_row,
        stride_col => stride_col,
        padding => padding,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    image_in_m_axi_U : component LinearImageFilter_image_in_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_IN_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_IN_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_IN_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_IN_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_IN_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_IN_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_IN_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_IN_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_IN_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_IN_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_IN_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_image_in_AWVALID,
        AWREADY => m_axi_image_in_AWREADY,
        AWADDR => m_axi_image_in_AWADDR,
        AWID => m_axi_image_in_AWID,
        AWLEN => m_axi_image_in_AWLEN,
        AWSIZE => m_axi_image_in_AWSIZE,
        AWBURST => m_axi_image_in_AWBURST,
        AWLOCK => m_axi_image_in_AWLOCK,
        AWCACHE => m_axi_image_in_AWCACHE,
        AWPROT => m_axi_image_in_AWPROT,
        AWQOS => m_axi_image_in_AWQOS,
        AWREGION => m_axi_image_in_AWREGION,
        AWUSER => m_axi_image_in_AWUSER,
        WVALID => m_axi_image_in_WVALID,
        WREADY => m_axi_image_in_WREADY,
        WDATA => m_axi_image_in_WDATA,
        WSTRB => m_axi_image_in_WSTRB,
        WLAST => m_axi_image_in_WLAST,
        WID => m_axi_image_in_WID,
        WUSER => m_axi_image_in_WUSER,
        ARVALID => m_axi_image_in_ARVALID,
        ARREADY => m_axi_image_in_ARREADY,
        ARADDR => m_axi_image_in_ARADDR,
        ARID => m_axi_image_in_ARID,
        ARLEN => m_axi_image_in_ARLEN,
        ARSIZE => m_axi_image_in_ARSIZE,
        ARBURST => m_axi_image_in_ARBURST,
        ARLOCK => m_axi_image_in_ARLOCK,
        ARCACHE => m_axi_image_in_ARCACHE,
        ARPROT => m_axi_image_in_ARPROT,
        ARQOS => m_axi_image_in_ARQOS,
        ARREGION => m_axi_image_in_ARREGION,
        ARUSER => m_axi_image_in_ARUSER,
        RVALID => m_axi_image_in_RVALID,
        RREADY => m_axi_image_in_RREADY,
        RDATA => m_axi_image_in_RDATA,
        RLAST => m_axi_image_in_RLAST,
        RID => m_axi_image_in_RID,
        RUSER => m_axi_image_in_RUSER,
        RRESP => m_axi_image_in_RRESP,
        BVALID => m_axi_image_in_BVALID,
        BREADY => m_axi_image_in_BREADY,
        BRESP => m_axi_image_in_BRESP,
        BID => m_axi_image_in_BID,
        BUSER => m_axi_image_in_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => image_in_ARVALID,
        I_ARREADY => image_in_ARREADY,
        I_ARADDR => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARADDR,
        I_ARLEN => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARLEN,
        I_RVALID => image_in_RVALID,
        I_RREADY => image_in_RREADY,
        I_RDATA => image_in_RDATA,
        I_RFIFONUM => image_in_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => image_in_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => image_in_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => image_in_BVALID,
        I_BREADY => ap_const_logic_0);

    image_out_m_axi_U : component LinearImageFilter_image_out_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMAGE_OUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMAGE_OUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMAGE_OUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMAGE_OUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMAGE_OUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMAGE_OUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMAGE_OUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMAGE_OUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMAGE_OUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMAGE_OUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMAGE_OUT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_image_out_AWVALID,
        AWREADY => m_axi_image_out_AWREADY,
        AWADDR => m_axi_image_out_AWADDR,
        AWID => m_axi_image_out_AWID,
        AWLEN => m_axi_image_out_AWLEN,
        AWSIZE => m_axi_image_out_AWSIZE,
        AWBURST => m_axi_image_out_AWBURST,
        AWLOCK => m_axi_image_out_AWLOCK,
        AWCACHE => m_axi_image_out_AWCACHE,
        AWPROT => m_axi_image_out_AWPROT,
        AWQOS => m_axi_image_out_AWQOS,
        AWREGION => m_axi_image_out_AWREGION,
        AWUSER => m_axi_image_out_AWUSER,
        WVALID => m_axi_image_out_WVALID,
        WREADY => m_axi_image_out_WREADY,
        WDATA => m_axi_image_out_WDATA,
        WSTRB => m_axi_image_out_WSTRB,
        WLAST => m_axi_image_out_WLAST,
        WID => m_axi_image_out_WID,
        WUSER => m_axi_image_out_WUSER,
        ARVALID => m_axi_image_out_ARVALID,
        ARREADY => m_axi_image_out_ARREADY,
        ARADDR => m_axi_image_out_ARADDR,
        ARID => m_axi_image_out_ARID,
        ARLEN => m_axi_image_out_ARLEN,
        ARSIZE => m_axi_image_out_ARSIZE,
        ARBURST => m_axi_image_out_ARBURST,
        ARLOCK => m_axi_image_out_ARLOCK,
        ARCACHE => m_axi_image_out_ARCACHE,
        ARPROT => m_axi_image_out_ARPROT,
        ARQOS => m_axi_image_out_ARQOS,
        ARREGION => m_axi_image_out_ARREGION,
        ARUSER => m_axi_image_out_ARUSER,
        RVALID => m_axi_image_out_RVALID,
        RREADY => m_axi_image_out_RREADY,
        RDATA => m_axi_image_out_RDATA,
        RLAST => m_axi_image_out_RLAST,
        RID => m_axi_image_out_RID,
        RUSER => m_axi_image_out_RUSER,
        RRESP => m_axi_image_out_RRESP,
        BVALID => m_axi_image_out_BVALID,
        BREADY => m_axi_image_out_BREADY,
        BRESP => m_axi_image_out_BRESP,
        BID => m_axi_image_out_BID,
        BUSER => m_axi_image_out_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => image_out_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => image_out_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => image_out_RDATA,
        I_RFIFONUM => image_out_RFIFONUM,
        I_AWVALID => image_out_AWVALID,
        I_AWREADY => image_out_AWREADY,
        I_AWADDR => sext_ln43_fu_386_p1,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => image_out_WVALID,
        I_WREADY => image_out_WREADY,
        I_WDATA => image_out_WDATA,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => image_out_BVALID,
        I_BREADY => image_out_BREADY);

    kernel_m_axi_U : component LinearImageFilter_kernel_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_KERNEL_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_KERNEL_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_KERNEL_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_KERNEL_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_KERNEL_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_KERNEL_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_KERNEL_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_KERNEL_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_KERNEL_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_KERNEL_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_KERNEL_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_kernel_AWVALID,
        AWREADY => m_axi_kernel_AWREADY,
        AWADDR => m_axi_kernel_AWADDR,
        AWID => m_axi_kernel_AWID,
        AWLEN => m_axi_kernel_AWLEN,
        AWSIZE => m_axi_kernel_AWSIZE,
        AWBURST => m_axi_kernel_AWBURST,
        AWLOCK => m_axi_kernel_AWLOCK,
        AWCACHE => m_axi_kernel_AWCACHE,
        AWPROT => m_axi_kernel_AWPROT,
        AWQOS => m_axi_kernel_AWQOS,
        AWREGION => m_axi_kernel_AWREGION,
        AWUSER => m_axi_kernel_AWUSER,
        WVALID => m_axi_kernel_WVALID,
        WREADY => m_axi_kernel_WREADY,
        WDATA => m_axi_kernel_WDATA,
        WSTRB => m_axi_kernel_WSTRB,
        WLAST => m_axi_kernel_WLAST,
        WID => m_axi_kernel_WID,
        WUSER => m_axi_kernel_WUSER,
        ARVALID => m_axi_kernel_ARVALID,
        ARREADY => m_axi_kernel_ARREADY,
        ARADDR => m_axi_kernel_ARADDR,
        ARID => m_axi_kernel_ARID,
        ARLEN => m_axi_kernel_ARLEN,
        ARSIZE => m_axi_kernel_ARSIZE,
        ARBURST => m_axi_kernel_ARBURST,
        ARLOCK => m_axi_kernel_ARLOCK,
        ARCACHE => m_axi_kernel_ARCACHE,
        ARPROT => m_axi_kernel_ARPROT,
        ARQOS => m_axi_kernel_ARQOS,
        ARREGION => m_axi_kernel_ARREGION,
        ARUSER => m_axi_kernel_ARUSER,
        RVALID => m_axi_kernel_RVALID,
        RREADY => m_axi_kernel_RREADY,
        RDATA => m_axi_kernel_RDATA,
        RLAST => m_axi_kernel_RLAST,
        RID => m_axi_kernel_RID,
        RUSER => m_axi_kernel_RUSER,
        RRESP => m_axi_kernel_RRESP,
        BVALID => m_axi_kernel_BVALID,
        BREADY => m_axi_kernel_BREADY,
        BRESP => m_axi_kernel_BRESP,
        BID => m_axi_kernel_BID,
        BUSER => m_axi_kernel_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => kernel_ARVALID,
        I_ARREADY => kernel_ARREADY,
        I_ARADDR => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARADDR,
        I_ARLEN => grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARLEN,
        I_RVALID => kernel_RVALID,
        I_RREADY => kernel_RREADY,
        I_RDATA => kernel_RDATA,
        I_RFIFONUM => kernel_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => kernel_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => kernel_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => kernel_BVALID,
        I_BREADY => ap_const_logic_0);

    mul_32ns_32ns_64_2_1_U26 : component LinearImageFilter_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_231_p0,
        din1 => grp_fu_231_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_231_p2);

    mul_32s_32s_32_2_1_U27 : component LinearImageFilter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_235_p0,
        din1 => grp_fu_235_p1,
        ce => grp_fu_235_ce,
        dout => grp_fu_235_p2);

    udiv_32ns_32ns_32_36_seq_1_U28 : component LinearImageFilter_udiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_324_ap_start,
        done => grp_fu_324_ap_done,
        din0 => row_fu_116,
        din1 => stride_row_read_reg_418,
        ce => grp_fu_324_ce,
        dout => grp_fu_324_p2);

    udiv_32ns_32ns_30_36_seq_1_U29 : component LinearImageFilter_udiv_32ns_32ns_30_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_328_ap_start,
        done => grp_fu_328_ap_done,
        din0 => col_reg_194,
        din1 => stride_col_read_reg_411,
        ce => grp_fu_328_ce,
        dout => grp_fu_328_p2);

    udiv_32ns_32ns_30_36_seq_1_U30 : component LinearImageFilter_udiv_32ns_32ns_30_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_347_ap_start,
        done => grp_fu_347_ap_done,
        din0 => mul_ln43_reg_563,
        din1 => stride_col_read_reg_411,
        ce => ap_const_logic_1,
        dout => grp_fu_347_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln23_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_ready = ap_const_logic_1)) then 
                    grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((image_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
                col_reg_194 <= col_1_reg_548;
            elsif (((icmp_ln21_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_fu_116 <= ap_const_lv32_0;
            elsif (((icmp_ln23_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row_fu_116 <= row_3_fu_338_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                add_ln43_reg_568 <= add_ln43_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_reg_540 <= add_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                col_1_reg_548 <= col_1_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cols_read_reg_435 <= cols;
                div_reg_480 <= kernel_size_r(31 downto 1);
                empty_42_reg_491 <= empty_42_fu_265_p1;
                empty_reg_486 <= empty_fu_261_p1;
                image_in_offset_read_reg_448 <= image_in_offset;
                image_out_offset_read_reg_453 <= image_out_offset;
                kernel_offset_read_reg_430 <= kernel_offset;
                kernel_size_read_reg_424 <= kernel_size_r;
                rows_read_reg_442 <= rows;
                stride_col_read_reg_411 <= stride_col;
                stride_row_read_reg_418 <= stride_row;
                trunc_ln7_1_reg_469 <= trunc_ln7_1_fu_243_p1;
                trunc_ln7_2_reg_475 <= trunc_ln7_2_fu_247_p1;
                trunc_ln7_reg_464 <= trunc_ln7_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    div_cast_reg_502(30 downto 0) <= div_cast_fu_279_p1(30 downto 0);
                    mul35_i_reg_522(29 downto 1) <= mul35_i_fu_299_p3(29 downto 1);
                    mul_i_reg_517(29 downto 1) <= mul_i_fu_292_p3(29 downto 1);
                mul_ln7_reg_527 <= grp_fu_231_p2;
                sub16_i_reg_512 <= sub16_i_fu_287_p2;
                sub_i_reg_507 <= sub_i_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                mul_ln43_reg_563 <= grp_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                trunc_ln43_2_reg_573 <= add_ln43_1_fu_371_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                udiv_ln43_2_reg_558 <= grp_fu_328_p2;
                udiv_ln43_reg_553 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    div_cast_reg_502(31) <= '0';
    mul_i_reg_517(0) <= '0';
    mul35_i_reg_522(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state86, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_done, image_out_AWREADY, image_out_WREADY, image_out_BVALID, icmp_ln21_fu_309_p2, icmp_ln23_fu_319_p2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln21_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((image_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((image_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((image_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_fu_314_p2 <= std_logic_vector(unsigned(row_fu_116) - unsigned(div_cast_reg_502));
    add_ln43_1_fu_371_p2 <= std_logic_vector(unsigned(shl_ln_fu_364_p3) + unsigned(image_out_offset_read_reg_453));
    add_ln43_fu_358_p2 <= std_logic_vector(unsigned(trunc_ln43_1_fu_355_p1) + unsigned(trunc_ln43_fu_351_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_done)
    begin
        if ((grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state80_blk_assign_proc : process(image_out_AWREADY)
    begin
        if ((image_out_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state80_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state80_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state81_blk_assign_proc : process(image_out_WREADY)
    begin
        if ((image_out_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state81_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state81_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;

    ap_ST_fsm_state86_blk_assign_proc : process(image_out_BVALID)
    begin
        if ((image_out_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state86_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state86_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln21_fu_309_p2)
    begin
        if (((icmp_ln21_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln21_fu_309_p2)
    begin
        if (((icmp_ln21_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_1_fu_333_p2 <= std_logic_vector(unsigned(col_reg_194) + unsigned(stride_col_read_reg_411));
    div_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_reg_480),32));
    empty_42_fu_265_p0 <= cols;
    empty_42_fu_265_p1 <= empty_42_fu_265_p0(29 - 1 downto 0);
    empty_fu_261_p1 <= rows(29 - 1 downto 0);
    grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_ap_start_reg;
    grp_fu_231_p0 <= zext_ln7_fu_274_p1(32 - 1 downto 0);
    grp_fu_231_p1 <= zext_ln7_fu_274_p1(32 - 1 downto 0);

    grp_fu_235_ce_assign_proc : process(grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_ce, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_235_ce <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_ce;
        else 
            grp_fu_235_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_235_p0_assign_proc : process(udiv_ln43_reg_553, grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_din0, ap_CS_fsm_state6, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_235_p0 <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_235_p0 <= udiv_ln43_reg_553;
        else 
            grp_fu_235_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_235_p1_assign_proc : process(cols_read_reg_435, grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_din1, ap_CS_fsm_state6, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_235_p1 <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_grp_fu_235_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_235_p1 <= cols_read_reg_435;
        else 
            grp_fu_235_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_324_ap_start_assign_proc : process(ap_CS_fsm_state5, icmp_ln23_fu_319_p2)
    begin
        if (((icmp_ln23_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_324_ap_start <= ap_const_logic_1;
        else 
            grp_fu_324_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_324_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) 
    or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_324_ce <= ap_const_logic_1;
        else 
            grp_fu_324_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_328_ap_start_assign_proc : process(ap_CS_fsm_state5, icmp_ln23_fu_319_p2)
    begin
        if (((icmp_ln23_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_328_ap_start <= ap_const_logic_1;
        else 
            grp_fu_328_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_328_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) 
    or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_328_ce <= ap_const_logic_1;
        else 
            grp_fu_328_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_347_ap_start_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_347_ap_start <= ap_const_logic_1;
        else 
            grp_fu_347_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln21_fu_309_p2 <= "1" when (unsigned(row_fu_116) < unsigned(rows_read_reg_442)) else "0";
    icmp_ln23_fu_319_p2 <= "1" when (unsigned(col_reg_194) < unsigned(cols_read_reg_435)) else "0";

    image_in_ARVALID_assign_proc : process(ap_CS_fsm_state5, grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARVALID, icmp_ln23_fu_319_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln23_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            image_in_ARVALID <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_ARVALID;
        else 
            image_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    image_in_RREADY_assign_proc : process(ap_CS_fsm_state5, grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_RREADY, icmp_ln23_fu_319_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln23_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            image_in_RREADY <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_image_in_RREADY;
        else 
            image_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    image_out_AWVALID_assign_proc : process(ap_CS_fsm_state80, image_out_AWREADY)
    begin
        if (((image_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            image_out_AWVALID <= ap_const_logic_1;
        else 
            image_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    image_out_BREADY_assign_proc : process(ap_CS_fsm_state86, image_out_BVALID)
    begin
        if (((image_out_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            image_out_BREADY <= ap_const_logic_1;
        else 
            image_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    image_out_WDATA <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_sum_1_out;

    image_out_WVALID_assign_proc : process(ap_CS_fsm_state81, image_out_WREADY)
    begin
        if (((image_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            image_out_WVALID <= ap_const_logic_1;
        else 
            image_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    image_out_blk_n_AW_assign_proc : process(m_axi_image_out_AWREADY, ap_CS_fsm_state80)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            image_out_blk_n_AW <= m_axi_image_out_AWREADY;
        else 
            image_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    image_out_blk_n_B_assign_proc : process(m_axi_image_out_BVALID, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            image_out_blk_n_B <= m_axi_image_out_BVALID;
        else 
            image_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    image_out_blk_n_W_assign_proc : process(m_axi_image_out_WREADY, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            image_out_blk_n_W <= m_axi_image_out_WREADY;
        else 
            image_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    kernel_ARVALID_assign_proc : process(ap_CS_fsm_state5, grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARVALID, icmp_ln23_fu_319_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln23_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            kernel_ARVALID <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_ARVALID;
        else 
            kernel_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    kernel_RREADY_assign_proc : process(ap_CS_fsm_state5, grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_RREADY, icmp_ln23_fu_319_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln23_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            kernel_RREADY <= grp_LinearImageFilter_Pipeline_ker_rows_loop_ker_cols_loop_fu_206_m_axi_kernel_RREADY;
        else 
            kernel_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    mul35_i_fu_299_p3 <= (empty_42_reg_491 & ap_const_lv1_0);
    mul_i_fu_292_p3 <= (empty_reg_486 & ap_const_lv1_0);
    row_3_fu_338_p2 <= std_logic_vector(unsigned(row_fu_116) + unsigned(stride_row_read_reg_418));
        sext_ln43_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln43_2_reg_573),32));

    shl_ln_fu_364_p3 <= (add_ln43_reg_568 & ap_const_lv2_0);
    sub16_i_fu_287_p2 <= std_logic_vector(unsigned(trunc_ln7_1_reg_469) + unsigned(ap_const_lv30_3FFFFFFF));
    sub_i_fu_282_p2 <= std_logic_vector(unsigned(trunc_ln7_2_reg_475) + unsigned(ap_const_lv30_3FFFFFFF));
    trunc_ln43_1_fu_355_p1 <= udiv_ln43_2_reg_558(30 - 1 downto 0);
    trunc_ln43_fu_351_p1 <= grp_fu_347_p2(30 - 1 downto 0);
    trunc_ln7_1_fu_243_p0 <= cols;
    trunc_ln7_1_fu_243_p1 <= trunc_ln7_1_fu_243_p0(30 - 1 downto 0);
    trunc_ln7_2_fu_247_p1 <= rows(30 - 1 downto 0);
    trunc_ln7_fu_239_p1 <= padding(3 - 1 downto 0);
    zext_ln7_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_size_read_reg_424),64));
end behav;
