// ==============================================================
// Generated by Vitis HLS v2023.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LinearImageFilter_LinearImageFilter_Pipeline_ker_cols (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_image_in_AWVALID,
        m_axi_image_in_AWREADY,
        m_axi_image_in_AWADDR,
        m_axi_image_in_AWID,
        m_axi_image_in_AWLEN,
        m_axi_image_in_AWSIZE,
        m_axi_image_in_AWBURST,
        m_axi_image_in_AWLOCK,
        m_axi_image_in_AWCACHE,
        m_axi_image_in_AWPROT,
        m_axi_image_in_AWQOS,
        m_axi_image_in_AWREGION,
        m_axi_image_in_AWUSER,
        m_axi_image_in_WVALID,
        m_axi_image_in_WREADY,
        m_axi_image_in_WDATA,
        m_axi_image_in_WSTRB,
        m_axi_image_in_WLAST,
        m_axi_image_in_WID,
        m_axi_image_in_WUSER,
        m_axi_image_in_ARVALID,
        m_axi_image_in_ARREADY,
        m_axi_image_in_ARADDR,
        m_axi_image_in_ARID,
        m_axi_image_in_ARLEN,
        m_axi_image_in_ARSIZE,
        m_axi_image_in_ARBURST,
        m_axi_image_in_ARLOCK,
        m_axi_image_in_ARCACHE,
        m_axi_image_in_ARPROT,
        m_axi_image_in_ARQOS,
        m_axi_image_in_ARREGION,
        m_axi_image_in_ARUSER,
        m_axi_image_in_RVALID,
        m_axi_image_in_RREADY,
        m_axi_image_in_RDATA,
        m_axi_image_in_RLAST,
        m_axi_image_in_RID,
        m_axi_image_in_RFIFONUM,
        m_axi_image_in_RUSER,
        m_axi_image_in_RRESP,
        m_axi_image_in_BVALID,
        m_axi_image_in_BREADY,
        m_axi_image_in_BRESP,
        m_axi_image_in_BID,
        m_axi_image_in_BUSER,
        sum,
        m_axi_kernel_AWVALID,
        m_axi_kernel_AWREADY,
        m_axi_kernel_AWADDR,
        m_axi_kernel_AWID,
        m_axi_kernel_AWLEN,
        m_axi_kernel_AWSIZE,
        m_axi_kernel_AWBURST,
        m_axi_kernel_AWLOCK,
        m_axi_kernel_AWCACHE,
        m_axi_kernel_AWPROT,
        m_axi_kernel_AWQOS,
        m_axi_kernel_AWREGION,
        m_axi_kernel_AWUSER,
        m_axi_kernel_WVALID,
        m_axi_kernel_WREADY,
        m_axi_kernel_WDATA,
        m_axi_kernel_WSTRB,
        m_axi_kernel_WLAST,
        m_axi_kernel_WID,
        m_axi_kernel_WUSER,
        m_axi_kernel_ARVALID,
        m_axi_kernel_ARREADY,
        m_axi_kernel_ARADDR,
        m_axi_kernel_ARID,
        m_axi_kernel_ARLEN,
        m_axi_kernel_ARSIZE,
        m_axi_kernel_ARBURST,
        m_axi_kernel_ARLOCK,
        m_axi_kernel_ARCACHE,
        m_axi_kernel_ARPROT,
        m_axi_kernel_ARQOS,
        m_axi_kernel_ARREGION,
        m_axi_kernel_ARUSER,
        m_axi_kernel_RVALID,
        m_axi_kernel_RREADY,
        m_axi_kernel_RDATA,
        m_axi_kernel_RLAST,
        m_axi_kernel_RID,
        m_axi_kernel_RFIFONUM,
        m_axi_kernel_RUSER,
        m_axi_kernel_RRESP,
        m_axi_kernel_BVALID,
        m_axi_kernel_BREADY,
        m_axi_kernel_BRESP,
        m_axi_kernel_BID,
        m_axi_kernel_BUSER,
        kernel_dim,
        padding,
        col,
        empty_28,
        cols,
        empty_29,
        rev,
        newRow_1,
        empty_30,
        empty_31,
        image_in_offset,
        empty,
        kernel_offset,
        newCol_2,
        newRow,
        rows,
        mul_i,
        mul35_i,
        sum_2_out,
        sum_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_image_in_AWVALID;
input   m_axi_image_in_AWREADY;
output  [31:0] m_axi_image_in_AWADDR;
output  [0:0] m_axi_image_in_AWID;
output  [31:0] m_axi_image_in_AWLEN;
output  [2:0] m_axi_image_in_AWSIZE;
output  [1:0] m_axi_image_in_AWBURST;
output  [1:0] m_axi_image_in_AWLOCK;
output  [3:0] m_axi_image_in_AWCACHE;
output  [2:0] m_axi_image_in_AWPROT;
output  [3:0] m_axi_image_in_AWQOS;
output  [3:0] m_axi_image_in_AWREGION;
output  [0:0] m_axi_image_in_AWUSER;
output   m_axi_image_in_WVALID;
input   m_axi_image_in_WREADY;
output  [31:0] m_axi_image_in_WDATA;
output  [3:0] m_axi_image_in_WSTRB;
output   m_axi_image_in_WLAST;
output  [0:0] m_axi_image_in_WID;
output  [0:0] m_axi_image_in_WUSER;
output   m_axi_image_in_ARVALID;
input   m_axi_image_in_ARREADY;
output  [31:0] m_axi_image_in_ARADDR;
output  [0:0] m_axi_image_in_ARID;
output  [31:0] m_axi_image_in_ARLEN;
output  [2:0] m_axi_image_in_ARSIZE;
output  [1:0] m_axi_image_in_ARBURST;
output  [1:0] m_axi_image_in_ARLOCK;
output  [3:0] m_axi_image_in_ARCACHE;
output  [2:0] m_axi_image_in_ARPROT;
output  [3:0] m_axi_image_in_ARQOS;
output  [3:0] m_axi_image_in_ARREGION;
output  [0:0] m_axi_image_in_ARUSER;
input   m_axi_image_in_RVALID;
output   m_axi_image_in_RREADY;
input  [31:0] m_axi_image_in_RDATA;
input   m_axi_image_in_RLAST;
input  [0:0] m_axi_image_in_RID;
input  [8:0] m_axi_image_in_RFIFONUM;
input  [0:0] m_axi_image_in_RUSER;
input  [1:0] m_axi_image_in_RRESP;
input   m_axi_image_in_BVALID;
output   m_axi_image_in_BREADY;
input  [1:0] m_axi_image_in_BRESP;
input  [0:0] m_axi_image_in_BID;
input  [0:0] m_axi_image_in_BUSER;
input  [31:0] sum;
output   m_axi_kernel_AWVALID;
input   m_axi_kernel_AWREADY;
output  [31:0] m_axi_kernel_AWADDR;
output  [0:0] m_axi_kernel_AWID;
output  [31:0] m_axi_kernel_AWLEN;
output  [2:0] m_axi_kernel_AWSIZE;
output  [1:0] m_axi_kernel_AWBURST;
output  [1:0] m_axi_kernel_AWLOCK;
output  [3:0] m_axi_kernel_AWCACHE;
output  [2:0] m_axi_kernel_AWPROT;
output  [3:0] m_axi_kernel_AWQOS;
output  [3:0] m_axi_kernel_AWREGION;
output  [0:0] m_axi_kernel_AWUSER;
output   m_axi_kernel_WVALID;
input   m_axi_kernel_WREADY;
output  [31:0] m_axi_kernel_WDATA;
output  [3:0] m_axi_kernel_WSTRB;
output   m_axi_kernel_WLAST;
output  [0:0] m_axi_kernel_WID;
output  [0:0] m_axi_kernel_WUSER;
output   m_axi_kernel_ARVALID;
input   m_axi_kernel_ARREADY;
output  [31:0] m_axi_kernel_ARADDR;
output  [0:0] m_axi_kernel_ARID;
output  [31:0] m_axi_kernel_ARLEN;
output  [2:0] m_axi_kernel_ARSIZE;
output  [1:0] m_axi_kernel_ARBURST;
output  [1:0] m_axi_kernel_ARLOCK;
output  [3:0] m_axi_kernel_ARCACHE;
output  [2:0] m_axi_kernel_ARPROT;
output  [3:0] m_axi_kernel_ARQOS;
output  [3:0] m_axi_kernel_ARREGION;
output  [0:0] m_axi_kernel_ARUSER;
input   m_axi_kernel_RVALID;
output   m_axi_kernel_RREADY;
input  [31:0] m_axi_kernel_RDATA;
input   m_axi_kernel_RLAST;
input  [0:0] m_axi_kernel_RID;
input  [8:0] m_axi_kernel_RFIFONUM;
input  [0:0] m_axi_kernel_RUSER;
input  [1:0] m_axi_kernel_RRESP;
input   m_axi_kernel_BVALID;
output   m_axi_kernel_BREADY;
input  [1:0] m_axi_kernel_BRESP;
input  [0:0] m_axi_kernel_BID;
input  [0:0] m_axi_kernel_BUSER;
input  [31:0] kernel_dim;
input  [7:0] padding;
input  [31:0] col;
input  [30:0] empty_28;
input  [31:0] cols;
input  [0:0] empty_29;
input  [0:0] rev;
input  [29:0] newRow_1;
input  [29:0] empty_30;
input  [29:0] empty_31;
input  [31:0] image_in_offset;
input  [29:0] empty;
input  [31:0] kernel_offset;
input  [29:0] newCol_2;
input  [31:0] newRow;
input  [31:0] rows;
input  [29:0] mul_i;
input  [29:0] mul35_i;
output  [31:0] sum_2_out;
output   sum_2_out_ap_vld;

reg ap_idle;
reg m_axi_image_in_ARVALID;
reg m_axi_image_in_RREADY;
reg m_axi_kernel_ARVALID;
reg m_axi_kernel_RREADY;
reg sum_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
reg   [0:0] or_ln62_1_reg_774;
reg   [0:0] or_ln62_1_reg_774_pp0_iter2_reg;
reg    ap_predicate_op141_read_state15;
reg    ap_block_state15_pp0_stage4_iter2;
reg    ap_block_pp0_stage4_subdone;
reg   [0:0] icmp_ln36_reg_744;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    kernel_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    kernel_blk_n_R;
wire    ap_block_pp0_stage0;
reg   [0:0] or_ln62_1_reg_774_pp0_iter1_reg;
reg    ap_block_pp0_stage4_11001;
reg    ap_predicate_pred237_state11;
reg    image_in_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    ap_predicate_op137_read_state11;
reg    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    ap_predicate_pred257_state7;
reg    image_in_blk_n_R;
wire    ap_block_pp0_stage4;
reg   [29:0] newCol_6_ph_reg_269;
wire   [0:0] tmp_3_reg_721;
reg   [31:0] j_1_reg_738;
wire   [0:0] icmp_ln36_fu_323_p2;
reg   [0:0] icmp_ln36_reg_744_pp0_iter1_reg;
reg   [0:0] icmp_ln36_reg_744_pp0_iter2_reg;
reg   [0:0] icmp_ln36_reg_744_pp0_iter3_reg;
wire   [31:0] newCol_fu_335_p2;
reg   [31:0] newCol_reg_748;
wire   [29:0] trunc_ln24_fu_341_p1;
reg   [29:0] trunc_ln24_reg_757;
wire   [30:0] trunc_ln24_1_fu_345_p1;
reg   [30:0] trunc_ln24_1_reg_762;
reg   [0:0] tmp_5_reg_767;
wire   [0:0] or_ln62_1_fu_381_p2;
reg    ap_predicate_op128_readreq_state7;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] or_ln62_1_reg_774_pp0_iter3_reg;
reg   [0:0] or_ln62_1_reg_774_pp0_iter4_reg;
wire   [31:0] newRow_2_fu_410_p3;
reg   [31:0] newRow_2_reg_778;
wire   [29:0] trunc_ln23_fu_416_p1;
reg   [29:0] trunc_ln23_reg_783;
wire   [31:0] newCol_5_fu_443_p3;
reg   [31:0] newCol_5_reg_789;
wire   [29:0] trunc_ln24_3_fu_449_p1;
reg   [29:0] trunc_ln24_3_reg_794;
wire   [29:0] newCol_3_fu_478_p3;
reg   [29:0] trunc_ln48_4_reg_805;
wire   [29:0] newRow_5_fu_541_p3;
reg    ap_predicate_op114_readreq_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage2_11001;
wire   [29:0] newCol_7_fu_568_p3;
wire   [29:0] grp_fu_301_p2;
reg   [29:0] mul_ln48_reg_826;
reg   [29:0] trunc_ln48_1_reg_831;
reg   [31:0] kernel_addr_read_reg_842;
reg   [31:0] image_in_addr_read_reg_847;
wire   [31:0] grp_fu_297_p2;
reg   [31:0] mul_reg_862;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] sum_2_reg_872;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [29:0] ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269;
reg  signed [29:0] ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281;
wire  signed [31:0] sext_ln48_1_fu_575_p1;
wire  signed [31:0] sext_ln48_fu_613_p1;
reg   [31:0] j_fu_116;
wire   [31:0] add_ln36_fu_357_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_j_1;
reg   [31:0] sum_1_fu_120;
reg    ap_predicate_pred467_state25;
reg   [31:0] ap_sig_allocacmp_sum_1_load_1;
reg    ap_block_pp0_stage4_01001;
wire   [31:0] grp_fu_297_p0;
wire   [31:0] grp_fu_297_p1;
wire    ap_block_pp0_stage3;
wire   [31:0] p_cast_fu_306_p1;
wire   [31:0] sub_ln41_fu_329_p2;
wire   [0:0] icmp_ln62_fu_362_p2;
wire   [0:0] or_ln62_fu_372_p2;
wire   [0:0] or_ln62_2_fu_376_p2;
wire   [0:0] xor_ln62_fu_366_p2;
wire   [0:0] abscond_fu_392_p2;
wire   [31:0] neg_fu_387_p2;
wire   [31:0] abs_fu_397_p3;
wire   [31:0] newRow_3_fu_404_p2;
wire   [0:0] abscond2_fu_425_p2;
wire   [31:0] neg1_fu_420_p2;
wire   [31:0] abs3_fu_430_p3;
wire   [31:0] newCol_4_fu_437_p2;
wire   [30:0] newCol_1_fu_453_p3;
wire   [31:0] zext_ln24_fu_459_p1;
wire   [0:0] icmp_ln79_fu_467_p2;
wire   [0:0] xor_ln79_fu_472_p2;
wire   [29:0] trunc_ln24_2_fu_463_p1;
wire   [29:0] trunc_ln48_fu_485_p1;
wire   [29:0] add_ln48_2_fu_488_p2;
wire   [31:0] shl_ln48_1_fu_493_p3;
wire   [31:0] add_ln48_3_fu_501_p2;
wire   [0:0] icmp_ln89_fu_521_p2;
wire   [29:0] add_ln91_fu_531_p2;
wire   [0:0] xor_ln89_fu_525_p2;
wire   [29:0] newRow_4_fu_536_p2;
wire   [0:0] icmp_ln97_fu_548_p2;
wire   [29:0] add_ln99_fu_558_p2;
wire   [0:0] xor_ln97_fu_552_p2;
wire   [29:0] newCol_6_fu_563_p2;
wire   [29:0] add_ln48_fu_585_p2;
wire   [31:0] shl_ln1_fu_590_p3;
wire   [31:0] add_ln48_1_fu_598_p2;
reg    grp_fu_293_ce;
reg    grp_fu_297_ce;
reg    grp_fu_301_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
reg    ap_done_pending_pp0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_831;
reg    ap_condition_835;
reg    ap_condition_839;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_116 = 32'd0;
#0 sum_1_fu_120 = 32'd0;
#0 ap_done_reg = 1'b0;
end

LinearImageFilter_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_sig_allocacmp_sum_1_load_1),
    .din1(mul_reg_862),
    .ce(grp_fu_293_ce),
    .dout(grp_fu_293_p2)
);

LinearImageFilter_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(grp_fu_297_ce),
    .dout(grp_fu_297_p2)
);

LinearImageFilter_mul_30s_30s_30_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
mul_30s_30s_30_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281),
    .din1(empty_31),
    .ce(grp_fu_301_ce),
    .dout(grp_fu_301_p2)
);

LinearImageFilter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_744 == 1'd0))) begin
        if ((1'b1 == ap_condition_839)) begin
            ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269 <= trunc_ln24_reg_757;
        end else if ((1'b1 == ap_condition_835)) begin
            ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269 <= newCol_7_fu_568_p3;
        end else if ((1'b1 == ap_condition_831)) begin
            ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269 <= newCol_3_fu_478_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_744 == 1'd0))) begin
        if ((1'b1 == ap_condition_839)) begin
            ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281 <= empty_30;
        end else if ((1'b1 == ap_condition_835)) begin
            ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281 <= newRow_5_fu_541_p3;
        end else if ((1'b1 == ap_condition_831)) begin
            ap_phi_reg_pp0_iter0_newRow_6_ph_reg_281 <= newRow_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_116 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_reg_744 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_fu_116 <= add_ln36_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_1_fu_120 <= sum;
    end else if (((ap_predicate_pred467_state25 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        sum_1_fu_120 <= sum_2_reg_872;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_predicate_pred237_state11 <= ((or_ln62_1_reg_774_pp0_iter1_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
        image_in_addr_read_reg_847 <= m_axi_image_in_RDATA;
        mul_ln48_reg_826 <= grp_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_predicate_pred257_state7 <= ((or_ln62_1_reg_774 == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
        icmp_ln36_reg_744 <= icmp_ln36_fu_323_p2;
        icmp_ln36_reg_744_pp0_iter1_reg <= icmp_ln36_reg_744;
        icmp_ln36_reg_744_pp0_iter2_reg <= icmp_ln36_reg_744_pp0_iter1_reg;
        icmp_ln36_reg_744_pp0_iter3_reg <= icmp_ln36_reg_744_pp0_iter2_reg;
        j_1_reg_738 <= ap_sig_allocacmp_j_1;
        kernel_addr_read_reg_842 <= m_axi_kernel_RDATA;
        newCol_reg_748 <= newCol_fu_335_p2;
        tmp_5_reg_767 <= newCol_fu_335_p2[32'd31];
        trunc_ln24_1_reg_762 <= trunc_ln24_1_fu_345_p1;
        trunc_ln24_reg_757 <= trunc_ln24_fu_341_p1;
        trunc_ln48_1_reg_831 <= {{add_ln48_1_fu_598_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_predicate_pred467_state25 <= ((or_ln62_1_reg_774_pp0_iter4_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
        mul_reg_862 <= grp_fu_297_p2;
        sum_2_reg_872 <= grp_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        newCol_5_reg_789 <= newCol_5_fu_443_p3;
        newRow_2_reg_778 <= newRow_2_fu_410_p3;
        or_ln62_1_reg_774 <= or_ln62_1_fu_381_p2;
        or_ln62_1_reg_774_pp0_iter1_reg <= or_ln62_1_reg_774;
        or_ln62_1_reg_774_pp0_iter2_reg <= or_ln62_1_reg_774_pp0_iter1_reg;
        or_ln62_1_reg_774_pp0_iter3_reg <= or_ln62_1_reg_774_pp0_iter2_reg;
        or_ln62_1_reg_774_pp0_iter4_reg <= or_ln62_1_reg_774_pp0_iter3_reg;
        trunc_ln23_reg_783 <= trunc_ln23_fu_416_p1;
        trunc_ln24_3_reg_794 <= trunc_ln24_3_fu_449_p1;
        trunc_ln48_4_reg_805 <= {{add_ln48_3_fu_501_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        newCol_6_ph_reg_269 <= ap_phi_reg_pp0_iter0_newCol_6_ph_reg_269;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln36_reg_744 == 1'd1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_116;
    end
end

always @ (*) begin
    if (((ap_predicate_pred467_state25 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        ap_sig_allocacmp_sum_1_load_1 = sum_2_reg_872;
    end else begin
        ap_sig_allocacmp_sum_1_load_1 = sum_1_fu_120;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_293_ce = 1'b1;
    end else begin
        grp_fu_293_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_297_ce = 1'b1;
    end else begin
        grp_fu_297_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        grp_fu_301_ce = 1'b1;
    end else begin
        grp_fu_301_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_pred257_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        image_in_blk_n_AR = m_axi_image_in_ARREADY;
    end else begin
        image_in_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_predicate_op141_read_state15 == 1'b1))) begin
        image_in_blk_n_R = m_axi_image_in_RVALID;
    end else begin
        image_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & ((((icmp_ln36_reg_744 == 1'd0) & (padding == 8'd1)) | ((icmp_ln36_reg_744 == 1'd0) & (padding == 8'd2))) | ((icmp_ln36_reg_744 == 1'd0) & (or_ln62_1_reg_774 == 1'd0))))) begin
        kernel_blk_n_AR = m_axi_kernel_ARREADY;
    end else begin
        kernel_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_pred237_state11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        kernel_blk_n_R = m_axi_kernel_RVALID;
    end else begin
        kernel_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op128_readreq_state7 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_image_in_ARVALID = 1'b1;
    end else begin
        m_axi_image_in_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_predicate_op141_read_state15 == 1'b1))) begin
        m_axi_image_in_RREADY = 1'b1;
    end else begin
        m_axi_image_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op114_readreq_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        m_axi_kernel_ARVALID = 1'b1;
    end else begin
        m_axi_kernel_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op137_read_state11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_kernel_RREADY = 1'b1;
    end else begin
        m_axi_kernel_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_744_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        sum_2_out_ap_vld = 1'b1;
    end else begin
        sum_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs3_fu_430_p3 = ((abscond2_fu_425_p2[0:0] == 1'b1) ? newCol_reg_748 : neg1_fu_420_p2);

assign abs_fu_397_p3 = ((abscond_fu_392_p2[0:0] == 1'b1) ? newRow : neg_fu_387_p2);

assign abscond2_fu_425_p2 = (($signed(newCol_reg_748) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_392_p2 = (($signed(newRow) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln36_fu_357_p2 = (j_1_reg_738 + 32'd1);

assign add_ln48_1_fu_598_p2 = (shl_ln1_fu_590_p3 + image_in_offset);

assign add_ln48_2_fu_488_p2 = (trunc_ln48_fu_485_p1 + empty);

assign add_ln48_3_fu_501_p2 = (shl_ln48_1_fu_493_p3 + kernel_offset);

assign add_ln48_fu_585_p2 = (mul_ln48_reg_826 + newCol_6_ph_reg_269);

assign add_ln91_fu_531_p2 = ($signed(mul_i) + $signed(30'd1073741823));

assign add_ln99_fu_558_p2 = ($signed(mul35_i) + $signed(30'd1073741823));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter2));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state7_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state7_io));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage4_iter2));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage4_iter2));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state15_pp0_stage4_iter2));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter2 = ((ap_predicate_op137_read_state11 == 1'b1) & (m_axi_kernel_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state15_pp0_stage4_iter2 = ((m_axi_image_in_RVALID == 1'b0) & (ap_predicate_op141_read_state15 == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op114_readreq_state3 == 1'b1) & (m_axi_kernel_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((m_axi_image_in_ARREADY == 1'b0) & (ap_predicate_op128_readreq_state7 == 1'b1));
end

always @ (*) begin
    ap_condition_831 = ((or_ln62_1_fu_381_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (padding == 8'd1));
end

always @ (*) begin
    ap_condition_835 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (or_ln62_1_reg_774 == 1'd1) & (padding == 8'd2));
end

always @ (*) begin
    ap_condition_839 = ((or_ln62_1_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

always @ (*) begin
    ap_predicate_op114_readreq_state3 = ((((icmp_ln36_reg_744 == 1'd0) & (padding == 8'd1)) | ((icmp_ln36_reg_744 == 1'd0) & (padding == 8'd2))) | ((icmp_ln36_reg_744 == 1'd0) & (or_ln62_1_reg_774 == 1'd0)));
end

always @ (*) begin
    ap_predicate_op128_readreq_state7 = ((or_ln62_1_reg_774 == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
end

always @ (*) begin
    ap_predicate_op137_read_state11 = ((or_ln62_1_reg_774_pp0_iter1_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
end

always @ (*) begin
    ap_predicate_op141_read_state15 = ((or_ln62_1_reg_774_pp0_iter2_reg == 1'd0) | ((padding == 8'd1) | (padding == 8'd2)));
end

assign grp_fu_297_p0 = image_in_addr_read_reg_847;

assign grp_fu_297_p1 = kernel_addr_read_reg_842;

assign icmp_ln36_fu_323_p2 = ((ap_sig_allocacmp_j_1 == kernel_dim) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_362_p2 = ((newCol_reg_748 < cols) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_467_p2 = ((zext_ln24_fu_459_p1 < cols) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_521_p2 = ((newRow_2_reg_778 < rows) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_548_p2 = ((newCol_5_reg_789 < cols) ? 1'b1 : 1'b0);

assign m_axi_image_in_ARADDR = sext_ln48_fu_613_p1;

assign m_axi_image_in_ARBURST = 2'd0;

assign m_axi_image_in_ARCACHE = 4'd0;

assign m_axi_image_in_ARID = 1'd0;

assign m_axi_image_in_ARLEN = 32'd1;

assign m_axi_image_in_ARLOCK = 2'd0;

assign m_axi_image_in_ARPROT = 3'd0;

assign m_axi_image_in_ARQOS = 4'd0;

assign m_axi_image_in_ARREGION = 4'd0;

assign m_axi_image_in_ARSIZE = 3'd0;

assign m_axi_image_in_ARUSER = 1'd0;

assign m_axi_image_in_AWADDR = 32'd0;

assign m_axi_image_in_AWBURST = 2'd0;

assign m_axi_image_in_AWCACHE = 4'd0;

assign m_axi_image_in_AWID = 1'd0;

assign m_axi_image_in_AWLEN = 32'd0;

assign m_axi_image_in_AWLOCK = 2'd0;

assign m_axi_image_in_AWPROT = 3'd0;

assign m_axi_image_in_AWQOS = 4'd0;

assign m_axi_image_in_AWREGION = 4'd0;

assign m_axi_image_in_AWSIZE = 3'd0;

assign m_axi_image_in_AWUSER = 1'd0;

assign m_axi_image_in_AWVALID = 1'b0;

assign m_axi_image_in_BREADY = 1'b0;

assign m_axi_image_in_WDATA = 32'd0;

assign m_axi_image_in_WID = 1'd0;

assign m_axi_image_in_WLAST = 1'b0;

assign m_axi_image_in_WSTRB = 4'd0;

assign m_axi_image_in_WUSER = 1'd0;

assign m_axi_image_in_WVALID = 1'b0;

assign m_axi_kernel_ARADDR = sext_ln48_1_fu_575_p1;

assign m_axi_kernel_ARBURST = 2'd0;

assign m_axi_kernel_ARCACHE = 4'd0;

assign m_axi_kernel_ARID = 1'd0;

assign m_axi_kernel_ARLEN = 32'd1;

assign m_axi_kernel_ARLOCK = 2'd0;

assign m_axi_kernel_ARPROT = 3'd0;

assign m_axi_kernel_ARQOS = 4'd0;

assign m_axi_kernel_ARREGION = 4'd0;

assign m_axi_kernel_ARSIZE = 3'd0;

assign m_axi_kernel_ARUSER = 1'd0;

assign m_axi_kernel_AWADDR = 32'd0;

assign m_axi_kernel_AWBURST = 2'd0;

assign m_axi_kernel_AWCACHE = 4'd0;

assign m_axi_kernel_AWID = 1'd0;

assign m_axi_kernel_AWLEN = 32'd0;

assign m_axi_kernel_AWLOCK = 2'd0;

assign m_axi_kernel_AWPROT = 3'd0;

assign m_axi_kernel_AWQOS = 4'd0;

assign m_axi_kernel_AWREGION = 4'd0;

assign m_axi_kernel_AWSIZE = 3'd0;

assign m_axi_kernel_AWUSER = 1'd0;

assign m_axi_kernel_AWVALID = 1'b0;

assign m_axi_kernel_BREADY = 1'b0;

assign m_axi_kernel_WDATA = 32'd0;

assign m_axi_kernel_WID = 1'd0;

assign m_axi_kernel_WLAST = 1'b0;

assign m_axi_kernel_WSTRB = 4'd0;

assign m_axi_kernel_WUSER = 1'd0;

assign m_axi_kernel_WVALID = 1'b0;

assign neg1_fu_420_p2 = (32'd0 - newCol_reg_748);

assign neg_fu_387_p2 = (32'd0 - newRow);

assign newCol_1_fu_453_p3 = ((tmp_5_reg_767[0:0] == 1'b1) ? 31'd0 : trunc_ln24_1_reg_762);

assign newCol_3_fu_478_p3 = ((xor_ln79_fu_472_p2[0:0] == 1'b1) ? newCol_2 : trunc_ln24_2_fu_463_p1);

assign newCol_4_fu_437_p2 = ($signed(abs3_fu_430_p3) + $signed(32'd4294967295));

assign newCol_5_fu_443_p3 = ((tmp_5_reg_767[0:0] == 1'b1) ? newCol_4_fu_437_p2 : newCol_reg_748);

assign newCol_6_fu_563_p2 = (add_ln99_fu_558_p2 - trunc_ln24_3_reg_794);

assign newCol_7_fu_568_p3 = ((xor_ln97_fu_552_p2[0:0] == 1'b1) ? newCol_6_fu_563_p2 : trunc_ln24_3_reg_794);

assign newCol_fu_335_p2 = (ap_sig_allocacmp_j_1 + sub_ln41_fu_329_p2);

assign newRow_2_fu_410_p3 = ((empty_29[0:0] == 1'b1) ? newRow_3_fu_404_p2 : newRow);

assign newRow_3_fu_404_p2 = ($signed(abs_fu_397_p3) + $signed(32'd4294967295));

assign newRow_4_fu_536_p2 = (add_ln91_fu_531_p2 - trunc_ln23_reg_783);

assign newRow_5_fu_541_p3 = ((xor_ln89_fu_525_p2[0:0] == 1'b1) ? newRow_4_fu_536_p2 : trunc_ln23_reg_783);

assign or_ln62_1_fu_381_p2 = (xor_ln62_fu_366_p2 | or_ln62_2_fu_376_p2);

assign or_ln62_2_fu_376_p2 = (tmp_5_reg_767 | or_ln62_fu_372_p2);

assign or_ln62_fu_372_p2 = (rev | empty_29);

assign p_cast_fu_306_p1 = empty_28;

assign sext_ln48_1_fu_575_p1 = $signed(trunc_ln48_4_reg_805);

assign sext_ln48_fu_613_p1 = $signed(trunc_ln48_1_reg_831);

assign shl_ln1_fu_590_p3 = {{add_ln48_fu_585_p2}, {2'd0}};

assign shl_ln48_1_fu_493_p3 = {{add_ln48_2_fu_488_p2}, {2'd0}};

assign sub_ln41_fu_329_p2 = (col - p_cast_fu_306_p1);

assign sum_2_out = sum_1_fu_120;

assign tmp_3_reg_721 = empty_29;

assign trunc_ln23_fu_416_p1 = newRow_2_fu_410_p3[29:0];

assign trunc_ln24_1_fu_345_p1 = newCol_fu_335_p2[30:0];

assign trunc_ln24_2_fu_463_p1 = newCol_1_fu_453_p3[29:0];

assign trunc_ln24_3_fu_449_p1 = newCol_5_fu_443_p3[29:0];

assign trunc_ln24_fu_341_p1 = newCol_fu_335_p2[29:0];

assign trunc_ln48_fu_485_p1 = j_1_reg_738[29:0];

assign xor_ln62_fu_366_p2 = (icmp_ln62_fu_362_p2 ^ 1'd1);

assign xor_ln79_fu_472_p2 = (icmp_ln79_fu_467_p2 ^ 1'd1);

assign xor_ln89_fu_525_p2 = (icmp_ln89_fu_521_p2 ^ 1'd1);

assign xor_ln97_fu_552_p2 = (icmp_ln97_fu_548_p2 ^ 1'd1);

assign zext_ln24_fu_459_p1 = newCol_1_fu_453_p3;

endmodule //LinearImageFilter_LinearImageFilter_Pipeline_ker_cols
