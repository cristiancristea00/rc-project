-- ==============================================================
-- Generated by Vitis HLS v2023.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LinearImageFilter_LinearImageFilter_Pipeline_ker_rows_ker_cols is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_kernel_AWVALID : OUT STD_LOGIC;
    m_axi_kernel_AWREADY : IN STD_LOGIC;
    m_axi_kernel_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_WVALID : OUT STD_LOGIC;
    m_axi_kernel_WREADY : IN STD_LOGIC;
    m_axi_kernel_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_WLAST : OUT STD_LOGIC;
    m_axi_kernel_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_ARVALID : OUT STD_LOGIC;
    m_axi_kernel_ARREADY : IN STD_LOGIC;
    m_axi_kernel_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kernel_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kernel_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_RVALID : IN STD_LOGIC;
    m_axi_kernel_RREADY : OUT STD_LOGIC;
    m_axi_kernel_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_kernel_RLAST : IN STD_LOGIC;
    m_axi_kernel_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_kernel_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_BVALID : IN STD_LOGIC;
    m_axi_kernel_BREADY : OUT STD_LOGIC;
    m_axi_kernel_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kernel_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_kernel_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_AWVALID : OUT STD_LOGIC;
    m_axi_image_in_AWREADY : IN STD_LOGIC;
    m_axi_image_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WVALID : OUT STD_LOGIC;
    m_axi_image_in_WREADY : IN STD_LOGIC;
    m_axi_image_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_WLAST : OUT STD_LOGIC;
    m_axi_image_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_ARVALID : OUT STD_LOGIC;
    m_axi_image_in_ARREADY : IN STD_LOGIC;
    m_axi_image_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RVALID : IN STD_LOGIC;
    m_axi_image_in_RREADY : OUT STD_LOGIC;
    m_axi_image_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_RLAST : IN STD_LOGIC;
    m_axi_image_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_image_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BVALID : IN STD_LOGIC;
    m_axi_image_in_BREADY : OUT STD_LOGIC;
    m_axi_image_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_ln7 : IN STD_LOGIC_VECTOR (63 downto 0);
    padding : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_dim : IN STD_LOGIC_VECTOR (31 downto 0);
    add : IN STD_LOGIC_VECTOR (31 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    newRow_4 : IN STD_LOGIC_VECTOR (29 downto 0);
    col : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_26 : IN STD_LOGIC_VECTOR (30 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (29 downto 0);
    image_in_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    newCol_2 : IN STD_LOGIC_VECTOR (29 downto 0);
    mul_i : IN STD_LOGIC_VECTOR (29 downto 0);
    mul35_i : IN STD_LOGIC_VECTOR (29 downto 0);
    sum_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sum_1_out_ap_vld : OUT STD_LOGIC;
    grp_fu_239_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_239_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_239_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_239_p_ce : OUT STD_LOGIC );
end;


architecture behav of LinearImageFilter_LinearImageFilter_Pipeline_ker_rows_ker_cols is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv30_3FFFFFFF : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln34_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal kernel_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln60_1_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_predicate_pred208_state6 : BOOLEAN;
    signal kernel_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_ln60_1_reg_944_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_predicate_pred231_state14 : BOOLEAN;
    signal image_in_blk_n_AR : STD_LOGIC;
    signal ap_predicate_pred247_state9 : BOOLEAN;
    signal image_in_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal or_ln60_1_reg_944_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op137_readreq_state6 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_predicate_pred265_state17 : BOOLEAN;
    signal newCol_6_ph_reg_249 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_cast_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op166_read_state17 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln34_reg_856_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_856_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_856_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln34_reg_860 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_load_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln36_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_345_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln34_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln21_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRow_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRow_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_37_fu_363_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_37_reg_897 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal newRow_1_fu_406_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal newRow_1_reg_908 : STD_LOGIC_VECTOR (29 downto 0);
    signal newCol_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newCol_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln24_fu_423_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln24_reg_922 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln24_1_fu_427_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln24_1_reg_927 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_fu_449_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln46_reg_939 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_predicate_op152_readreq_state9 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_predicate_op163_read_state14 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal or_ln60_1_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln60_1_reg_944_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln60_1_reg_944_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newRow_2_fu_502_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRow_2_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_fu_508_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln23_reg_953 : STD_LOGIC_VECTOR (29 downto 0);
    signal newCol_5_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newCol_5_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln24_3_fu_541_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln24_3_reg_964 : STD_LOGIC_VECTOR (29 downto 0);
    signal newCol_3_fu_570_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal newRow_7_fu_597_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal newCol_7_fu_624_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln46_4_reg_985 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln46_reg_996 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln46_1_reg_1001 : STD_LOGIC_VECTOR (29 downto 0);
    signal kernel_addr_read_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_addr_read_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_newCol_6_ph_reg_249 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_reg_pp0_iter1_newCol_6_ph_reg_249 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_reg_pp0_iter0_newRow_6_ph_reg_261 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_phi_reg_pp0_iter1_newRow_6_ph_reg_261 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln46_1_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln46_fu_718_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_112 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln36_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_116 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal indvar_flatten_fu_120 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal sum_fu_124 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_predicate_pred506_state27 : BOOLEAN;
    signal ap_sig_allocacmp_sum_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln36_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_1_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_38_fu_367_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal newRow_3_fu_379_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal newRow_3_cast4_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ult43_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev44_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_39_fu_391_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln39_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ult_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln60_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln60_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln60_2_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newRow_5_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond2_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg1_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs3_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newCol_4_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newCol_1_fu_545_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln24_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln77_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_2_fu_555_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal icmp_ln87_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_fu_587_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal xor_ln87_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newRow_6_fu_592_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln95_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln97_fu_614_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal xor_ln95_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newCol_6_fu_619_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln46_2_fu_631_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln46_2_fu_634_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln46_1_fu_639_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_3_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_fu_690_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln1_fu_695_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_1_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_ce : STD_LOGIC;
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_281_ce : STD_LOGIC;
    signal grp_fu_286_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter4_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_820 : BOOLEAN;
    signal ap_condition_466 : BOOLEAN;
    signal ap_condition_456 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component LinearImageFilter_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearImageFilter_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearImageFilter_mul_30s_30s_30_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component LinearImageFilter_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearImageFilter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component LinearImageFilter_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_sum_load_1,
        din1 => mul_reg_1032,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component LinearImageFilter_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        din1 => grp_fu_277_p1,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    mul_30s_30s_30_2_1_U3 : component LinearImageFilter_mul_30s_30s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter1_newRow_6_ph_reg_261,
        din1 => empty,
        ce => grp_fu_281_ce,
        dout => grp_fu_281_p2);

    flow_control_loop_pipe_sequential_init_U : component LinearImageFilter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_newCol_6_ph_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_820)) then
                if ((or_ln60_1_fu_473_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_newCol_6_ph_reg_249 <= trunc_ln24_reg_922;
                elsif (((or_ln60_1_fu_473_p2 = ap_const_lv1_1) and (padding = ap_const_lv8_1))) then 
                    ap_phi_reg_pp0_iter0_newCol_6_ph_reg_249 <= newCol_3_fu_570_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_newRow_6_ph_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_820)) then
                if ((or_ln60_1_fu_473_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_newRow_6_ph_reg_261 <= empty_37_reg_897;
                elsif (((or_ln60_1_fu_473_p2 = ap_const_lv1_1) and (padding = ap_const_lv8_1))) then 
                    ap_phi_reg_pp0_iter0_newRow_6_ph_reg_261 <= newRow_1_reg_908;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_newCol_6_ph_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_456)) then
                if ((ap_const_boolean_1 = ap_condition_466)) then 
                    ap_phi_reg_pp0_iter1_newCol_6_ph_reg_249 <= newCol_7_fu_624_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_newCol_6_ph_reg_249 <= ap_phi_reg_pp0_iter0_newCol_6_ph_reg_249;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_newRow_6_ph_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_456)) then
                if ((ap_const_boolean_1 = ap_condition_466)) then 
                    ap_phi_reg_pp0_iter1_newRow_6_ph_reg_261 <= newRow_7_fu_597_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_newRow_6_ph_reg_261 <= ap_phi_reg_pp0_iter0_newRow_6_ph_reg_261;
                end if;
            end if; 
        end if;
    end process;

    i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_116 <= ap_const_lv32_0;
                elsif (((icmp_ln34_reg_856 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_116 <= select_ln34_reg_875;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_120 <= ap_const_lv64_0;
                elsif (((icmp_ln34_reg_856 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_120 <= add_ln34_reg_860;
                end if;
            end if; 
        end if;
    end process;

    j_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_112 <= ap_const_lv32_0;
                elsif (((icmp_ln34_reg_856 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_112 <= add_ln36_fu_672_p2;
                end if;
            end if; 
        end if;
    end process;

    sum_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sum_fu_124 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_pred506_state27 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                sum_fu_124 <= sum_1_reg_1042;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln34_reg_860 <= add_ln34_fu_322_p2;
                icmp_ln34_reg_856 <= icmp_ln34_fu_317_p2;
                icmp_ln34_reg_856_pp0_iter1_reg <= icmp_ln34_reg_856;
                icmp_ln34_reg_856_pp0_iter2_reg <= icmp_ln34_reg_856_pp0_iter1_reg;
                icmp_ln34_reg_856_pp0_iter3_reg <= icmp_ln34_reg_856_pp0_iter2_reg;
                icmp_ln36_reg_870 <= icmp_ln36_fu_334_p2;
                image_in_addr_read_reg_1017 <= m_axi_image_in_RDATA;
                j_load_reg_865 <= j_fu_112;
                mul_ln46_reg_996 <= grp_fu_281_p2;
                select_ln34_reg_875 <= select_ln34_fu_345_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_predicate_pred208_state6 <= ((((icmp_ln34_reg_856 = ap_const_lv1_0) and (padding = ap_const_lv8_1)) or ((icmp_ln34_reg_856 = ap_const_lv1_0) and (padding = ap_const_lv8_2))) or ((icmp_ln34_reg_856 = ap_const_lv1_0) and (or_ln60_1_reg_944 = ap_const_lv1_0)));
                trunc_ln46_4_reg_985 <= add_ln46_3_fu_647_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_predicate_pred231_state14 <= ((or_ln60_1_reg_944_pp0_iter1_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
                    ap_predicate_pred247_state9 <= ((or_ln60_1_reg_944 = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
                empty_37_reg_897 <= empty_37_fu_363_p1;
                newCol_reg_913 <= newCol_fu_417_p2;
                newRow_1_reg_908 <= newRow_1_fu_406_p3;
                newRow_reg_888 <= newRow_fu_359_p2;
                select_ln21_reg_882 <= select_ln21_fu_353_p3;
                tmp_2_reg_902 <= newRow_fu_359_p2(31 downto 31);
                tmp_3_reg_932 <= newCol_fu_417_p2(31 downto 31);
                trunc_ln24_1_reg_927 <= trunc_ln24_1_fu_427_p1;
                trunc_ln24_reg_922 <= trunc_ln24_fu_423_p1;
                trunc_ln46_1_reg_1001 <= add_ln46_1_fu_703_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_predicate_pred265_state17 <= ((or_ln60_1_reg_944_pp0_iter2_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
                    ap_predicate_pred506_state27 <= ((or_ln60_1_reg_944_pp0_iter4_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
                mul_reg_1032 <= grp_fu_277_p2;
                    p_cast_reg_851(30 downto 0) <= p_cast_fu_290_p1(30 downto 0);
                sum_1_reg_1042 <= grp_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                kernel_addr_read_reg_1012 <= m_axi_kernel_RDATA;
                newCol_5_reg_959 <= newCol_5_fu_535_p3;
                newRow_2_reg_948 <= newRow_2_fu_502_p3;
                or_ln60_1_reg_944 <= or_ln60_1_fu_473_p2;
                or_ln60_1_reg_944_pp0_iter1_reg <= or_ln60_1_reg_944;
                or_ln60_1_reg_944_pp0_iter2_reg <= or_ln60_1_reg_944_pp0_iter1_reg;
                or_ln60_1_reg_944_pp0_iter3_reg <= or_ln60_1_reg_944_pp0_iter2_reg;
                or_ln60_1_reg_944_pp0_iter4_reg <= or_ln60_1_reg_944_pp0_iter3_reg;
                trunc_ln23_reg_953 <= trunc_ln23_fu_508_p1;
                trunc_ln24_3_reg_964 <= trunc_ln24_3_fu_541_p1;
                trunc_ln46_reg_939 <= trunc_ln46_fu_449_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                newCol_6_ph_reg_249 <= ap_phi_reg_pp0_iter1_newCol_6_ph_reg_249;
            end if;
        end if;
    end process;
    p_cast_reg_851(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter4_stage1, ap_idle_pp0_0to3, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to5, ap_done_pending_pp0, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    abs3_fu_522_p3 <= 
        newCol_reg_913 when (abscond2_fu_517_p2(0) = '1') else 
        neg1_fu_512_p2;
    abs_fu_489_p3 <= 
        newRow_reg_888 when (abscond_fu_484_p2(0) = '1') else 
        neg_fu_479_p2;
    abscond2_fu_517_p2 <= "1" when (signed(newCol_reg_913) > signed(ap_const_lv32_0)) else "0";
    abscond_fu_484_p2 <= "1" when (signed(newRow_reg_888) > signed(ap_const_lv32_0)) else "0";
    add_ln34_1_fu_339_p2 <= std_logic_vector(unsigned(i_fu_116) + unsigned(ap_const_lv32_1));
    add_ln34_fu_322_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_120) + unsigned(ap_const_lv64_1));
    add_ln36_fu_672_p2 <= std_logic_vector(unsigned(select_ln21_reg_882) + unsigned(ap_const_lv32_1));
    add_ln46_1_fu_703_p2 <= std_logic_vector(unsigned(shl_ln1_fu_695_p3) + unsigned(image_in_offset));
    add_ln46_2_fu_634_p2 <= std_logic_vector(unsigned(trunc_ln46_2_fu_631_p1) + unsigned(trunc_ln46_reg_939));
    add_ln46_3_fu_647_p2 <= std_logic_vector(unsigned(shl_ln46_1_fu_639_p3) + unsigned(kernel_offset));
    add_ln46_fu_690_p2 <= std_logic_vector(unsigned(mul_ln46_reg_996) + unsigned(newCol_6_ph_reg_249));
    add_ln89_fu_587_p2 <= std_logic_vector(unsigned(mul_i) + unsigned(ap_const_lv30_3FFFFFFF));
    add_ln97_fu_614_p2 <= std_logic_vector(unsigned(mul35_i) + unsigned(ap_const_lv30_3FFFFFFF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state17_pp0_stage1_iter3)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage1_iter3));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state17_pp0_stage1_iter3)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage1_iter3));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state17_pp0_stage1_iter3)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage1_iter3));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state9_io, ap_block_state14_pp0_stage3_iter2)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage3_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state9_io, ap_block_state14_pp0_stage3_iter2)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_pp0_stage3_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage3_iter2_assign_proc : process(m_axi_kernel_RVALID, ap_predicate_op163_read_state14)
    begin
                ap_block_state14_pp0_stage3_iter2 <= ((ap_predicate_op163_read_state14 = ap_const_boolean_1) and (m_axi_kernel_RVALID = ap_const_logic_0));
    end process;


    ap_block_state17_pp0_stage1_iter3_assign_proc : process(m_axi_image_in_RVALID, ap_predicate_op166_read_state17)
    begin
                ap_block_state17_pp0_stage1_iter3 <= ((ap_predicate_op166_read_state17 = ap_const_boolean_1) and (m_axi_image_in_RVALID = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(m_axi_kernel_ARREADY, ap_predicate_op137_readreq_state6)
    begin
                ap_block_state6_io <= ((m_axi_kernel_ARREADY = ap_const_logic_0) and (ap_predicate_op137_readreq_state6 = ap_const_boolean_1));
    end process;


    ap_block_state9_io_assign_proc : process(m_axi_image_in_ARREADY, ap_predicate_op152_readreq_state9)
    begin
                ap_block_state9_io <= ((ap_predicate_op152_readreq_state9 = ap_const_boolean_1) and (m_axi_image_in_ARREADY = ap_const_logic_0));
    end process;


    ap_condition_456_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
                ap_condition_456 <= ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_condition_466_assign_proc : process(icmp_ln34_reg_856, padding, or_ln60_1_reg_944)
    begin
                ap_condition_466 <= ((icmp_ln34_reg_856 = ap_const_lv1_0) and (or_ln60_1_reg_944 = ap_const_lv1_1) and (padding = ap_const_lv8_2));
    end process;


    ap_condition_820_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln34_reg_856, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
                ap_condition_820 <= ((icmp_ln34_reg_856 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln34_reg_856)
    begin
        if (((icmp_ln34_reg_856 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, icmp_ln34_reg_856_pp0_iter3_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln34_reg_856_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter4_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_predicate_op137_readreq_state6_assign_proc : process(icmp_ln34_reg_856, padding, or_ln60_1_reg_944)
    begin
                ap_predicate_op137_readreq_state6 <= ((((icmp_ln34_reg_856 = ap_const_lv1_0) and (padding = ap_const_lv8_1)) or ((icmp_ln34_reg_856 = ap_const_lv1_0) and (padding = ap_const_lv8_2))) or ((icmp_ln34_reg_856 = ap_const_lv1_0) and (or_ln60_1_reg_944 = ap_const_lv1_0)));
    end process;


    ap_predicate_op152_readreq_state9_assign_proc : process(padding, or_ln60_1_reg_944)
    begin
                ap_predicate_op152_readreq_state9 <= ((or_ln60_1_reg_944 = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
    end process;


    ap_predicate_op163_read_state14_assign_proc : process(padding, or_ln60_1_reg_944_pp0_iter1_reg)
    begin
                ap_predicate_op163_read_state14 <= ((or_ln60_1_reg_944_pp0_iter1_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
    end process;


    ap_predicate_op166_read_state17_assign_proc : process(padding, or_ln60_1_reg_944_pp0_iter2_reg)
    begin
                ap_predicate_op166_read_state17 <= ((or_ln60_1_reg_944_pp0_iter2_reg = ap_const_lv1_0) or ((padding = ap_const_lv8_1) or (padding = ap_const_lv8_2)));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_sum_load_1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, sum_1_reg_1042, sum_fu_124, ap_predicate_pred506_state27)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_pred506_state27 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_sum_load_1 <= sum_1_reg_1042;
        else 
            ap_sig_allocacmp_sum_load_1 <= sum_fu_124;
        end if; 
    end process;

    empty_37_fu_363_p1 <= newRow_fu_359_p2(30 - 1 downto 0);
    empty_38_fu_367_p1 <= newRow_fu_359_p2(31 - 1 downto 0);
    empty_39_fu_391_p1 <= newRow_3_fu_379_p3(30 - 1 downto 0);
    grp_fu_239_p_ce <= grp_fu_286_ce;
    grp_fu_239_p_din0 <= select_ln34_reg_875;
    grp_fu_239_p_din1 <= kernel_dim;

    grp_fu_273_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_273_ce <= ap_const_logic_1;
        else 
            grp_fu_273_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_277_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_277_ce <= ap_const_logic_1;
        else 
            grp_fu_277_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_277_p0 <= image_in_addr_read_reg_1017;
    grp_fu_277_p1 <= kernel_addr_read_reg_1012;

    grp_fu_281_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_281_ce <= ap_const_logic_1;
        else 
            grp_fu_281_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_286_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_286_ce <= ap_const_logic_1;
        else 
            grp_fu_286_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln34_fu_317_p2 <= "1" when (indvar_flatten_fu_120 = mul_ln7) else "0";
    icmp_ln36_fu_334_p1 <= kernel_dim;
    icmp_ln36_fu_334_p2 <= "1" when (j_fu_112 = icmp_ln36_fu_334_p1) else "0";
    icmp_ln60_fu_453_p2 <= "1" when (unsigned(newCol_reg_913) < unsigned(cols)) else "0";
    icmp_ln77_fu_559_p2 <= "1" when (unsigned(zext_ln24_fu_551_p1) < unsigned(cols)) else "0";
    icmp_ln87_fu_577_p2 <= "1" when (unsigned(newRow_2_reg_948) < unsigned(rows)) else "0";
    icmp_ln95_fu_604_p2 <= "1" when (unsigned(newCol_5_reg_959) < unsigned(cols)) else "0";

    image_in_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_image_in_ARREADY, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_predicate_pred247_state9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_pred247_state9 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            image_in_blk_n_AR <= m_axi_image_in_ARREADY;
        else 
            image_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    image_in_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_image_in_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_predicate_pred265_state17)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_pred265_state17 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_in_blk_n_R <= m_axi_image_in_RVALID;
        else 
            image_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    kernel_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_kernel_ARREADY, ap_block_pp0_stage0, ap_predicate_pred208_state6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_pred208_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_blk_n_AR <= m_axi_kernel_ARREADY;
        else 
            kernel_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    kernel_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_kernel_RVALID, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_predicate_pred231_state14)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_pred231_state14 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            kernel_blk_n_R <= m_axi_kernel_RVALID;
        else 
            kernel_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_image_in_ARADDR <= sext_ln46_fu_718_p1;
    m_axi_image_in_ARBURST <= ap_const_lv2_0;
    m_axi_image_in_ARCACHE <= ap_const_lv4_0;
    m_axi_image_in_ARID <= ap_const_lv1_0;
    m_axi_image_in_ARLEN <= ap_const_lv32_1;
    m_axi_image_in_ARLOCK <= ap_const_lv2_0;
    m_axi_image_in_ARPROT <= ap_const_lv3_0;
    m_axi_image_in_ARQOS <= ap_const_lv4_0;
    m_axi_image_in_ARREGION <= ap_const_lv4_0;
    m_axi_image_in_ARSIZE <= ap_const_lv3_0;
    m_axi_image_in_ARUSER <= ap_const_lv1_0;

    m_axi_image_in_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_predicate_op152_readreq_state9, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_predicate_op152_readreq_state9 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            m_axi_image_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_image_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_AWADDR <= ap_const_lv32_0;
    m_axi_image_in_AWBURST <= ap_const_lv2_0;
    m_axi_image_in_AWCACHE <= ap_const_lv4_0;
    m_axi_image_in_AWID <= ap_const_lv1_0;
    m_axi_image_in_AWLEN <= ap_const_lv32_0;
    m_axi_image_in_AWLOCK <= ap_const_lv2_0;
    m_axi_image_in_AWPROT <= ap_const_lv3_0;
    m_axi_image_in_AWQOS <= ap_const_lv4_0;
    m_axi_image_in_AWREGION <= ap_const_lv4_0;
    m_axi_image_in_AWSIZE <= ap_const_lv3_0;
    m_axi_image_in_AWUSER <= ap_const_lv1_0;
    m_axi_image_in_AWVALID <= ap_const_logic_0;
    m_axi_image_in_BREADY <= ap_const_logic_0;

    m_axi_image_in_RREADY_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_predicate_op166_read_state17, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op166_read_state17 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_image_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_image_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_WDATA <= ap_const_lv32_0;
    m_axi_image_in_WID <= ap_const_lv1_0;
    m_axi_image_in_WLAST <= ap_const_logic_0;
    m_axi_image_in_WSTRB <= ap_const_lv4_0;
    m_axi_image_in_WUSER <= ap_const_lv1_0;
    m_axi_image_in_WVALID <= ap_const_logic_0;
    m_axi_kernel_ARADDR <= sext_ln46_1_fu_662_p1;
    m_axi_kernel_ARBURST <= ap_const_lv2_0;
    m_axi_kernel_ARCACHE <= ap_const_lv4_0;
    m_axi_kernel_ARID <= ap_const_lv1_0;
    m_axi_kernel_ARLEN <= ap_const_lv32_1;
    m_axi_kernel_ARLOCK <= ap_const_lv2_0;
    m_axi_kernel_ARPROT <= ap_const_lv3_0;
    m_axi_kernel_ARQOS <= ap_const_lv4_0;
    m_axi_kernel_ARREGION <= ap_const_lv4_0;
    m_axi_kernel_ARSIZE <= ap_const_lv3_0;
    m_axi_kernel_ARUSER <= ap_const_lv1_0;

    m_axi_kernel_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op137_readreq_state6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op137_readreq_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_kernel_ARVALID <= ap_const_logic_1;
        else 
            m_axi_kernel_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kernel_AWADDR <= ap_const_lv32_0;
    m_axi_kernel_AWBURST <= ap_const_lv2_0;
    m_axi_kernel_AWCACHE <= ap_const_lv4_0;
    m_axi_kernel_AWID <= ap_const_lv1_0;
    m_axi_kernel_AWLEN <= ap_const_lv32_0;
    m_axi_kernel_AWLOCK <= ap_const_lv2_0;
    m_axi_kernel_AWPROT <= ap_const_lv3_0;
    m_axi_kernel_AWQOS <= ap_const_lv4_0;
    m_axi_kernel_AWREGION <= ap_const_lv4_0;
    m_axi_kernel_AWSIZE <= ap_const_lv3_0;
    m_axi_kernel_AWUSER <= ap_const_lv1_0;
    m_axi_kernel_AWVALID <= ap_const_logic_0;
    m_axi_kernel_BREADY <= ap_const_logic_0;

    m_axi_kernel_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_predicate_op163_read_state14, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_predicate_op163_read_state14 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            m_axi_kernel_RREADY <= ap_const_logic_1;
        else 
            m_axi_kernel_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_kernel_WDATA <= ap_const_lv32_0;
    m_axi_kernel_WID <= ap_const_lv1_0;
    m_axi_kernel_WLAST <= ap_const_logic_0;
    m_axi_kernel_WSTRB <= ap_const_lv4_0;
    m_axi_kernel_WUSER <= ap_const_lv1_0;
    m_axi_kernel_WVALID <= ap_const_logic_0;
    neg1_fu_512_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(newCol_reg_913));
    neg_fu_479_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(newRow_reg_888));
    newCol_1_fu_545_p3 <= 
        ap_const_lv31_0 when (tmp_3_reg_932(0) = '1') else 
        trunc_ln24_1_reg_927;
    newCol_3_fu_570_p3 <= 
        newCol_2 when (xor_ln77_fu_564_p2(0) = '1') else 
        trunc_ln24_2_fu_555_p1;
    newCol_4_fu_529_p2 <= std_logic_vector(unsigned(abs3_fu_522_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    newCol_5_fu_535_p3 <= 
        newCol_4_fu_529_p2 when (tmp_3_reg_932(0) = '1') else 
        newCol_reg_913;
    newCol_6_fu_619_p2 <= std_logic_vector(unsigned(add_ln97_fu_614_p2) - unsigned(trunc_ln24_3_reg_964));
    newCol_7_fu_624_p3 <= 
        newCol_6_fu_619_p2 when (xor_ln95_fu_608_p2(0) = '1') else 
        trunc_ln24_3_reg_964;
    newCol_fu_417_p2 <= std_logic_vector(unsigned(select_ln21_fu_353_p3) + unsigned(sub_ln39_fu_413_p2));
    newRow_1_fu_406_p3 <= 
        newRow_4 when (rev44_fu_400_p2(0) = '1') else 
        empty_39_fu_391_p1;
    newRow_2_fu_502_p3 <= 
        newRow_5_fu_496_p2 when (tmp_2_reg_902(0) = '1') else 
        newRow_reg_888;
    newRow_3_cast4_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newRow_3_fu_379_p3),32));
    newRow_3_fu_379_p3 <= 
        ap_const_lv31_0 when (tmp_2_fu_371_p3(0) = '1') else 
        empty_38_fu_367_p1;
    newRow_5_fu_496_p2 <= std_logic_vector(unsigned(abs_fu_489_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    newRow_6_fu_592_p2 <= std_logic_vector(unsigned(add_ln89_fu_587_p2) - unsigned(trunc_ln23_reg_953));
    newRow_7_fu_597_p3 <= 
        newRow_6_fu_592_p2 when (xor_ln87_fu_581_p2(0) = '1') else 
        trunc_ln23_reg_953;
    newRow_fu_359_p2 <= std_logic_vector(signed(select_ln34_reg_875) + signed(add));
    or_ln60_1_fu_473_p2 <= (or_ln60_fu_468_p2 or or_ln60_2_fu_463_p2);
    or_ln60_2_fu_463_p2 <= (xor_ln60_fu_457_p2 or tmp_3_reg_932);
    or_ln60_fu_468_p2 <= (tmp_2_reg_902 or rev_fu_443_p2);
    p_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_26),32));
    rev44_fu_400_p2 <= (ult43_fu_395_p2 xor ap_const_lv1_1);
    rev_fu_443_p2 <= (ult_fu_439_p2 xor ap_const_lv1_1);
    select_ln21_fu_353_p3 <= 
        ap_const_lv32_0 when (icmp_ln36_reg_870(0) = '1') else 
        j_load_reg_865;
    select_ln34_fu_345_p3 <= 
        add_ln34_1_fu_339_p2 when (icmp_ln36_fu_334_p2(0) = '1') else 
        i_fu_116;
        sext_ln46_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln46_4_reg_985),32));

        sext_ln46_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln46_1_reg_1001),32));

    shl_ln1_fu_695_p3 <= (add_ln46_fu_690_p2 & ap_const_lv2_0);
    shl_ln46_1_fu_639_p3 <= (add_ln46_2_fu_634_p2 & ap_const_lv2_0);
    sub_ln39_fu_413_p2 <= std_logic_vector(unsigned(col) - unsigned(p_cast_reg_851));
    sum_1_out <= sum_fu_124;

    sum_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln34_reg_856_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln34_reg_856_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sum_1_out_ap_vld <= ap_const_logic_1;
        else 
            sum_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_371_p3 <= newRow_fu_359_p2(31 downto 31);
    trunc_ln23_fu_508_p1 <= newRow_2_fu_502_p3(30 - 1 downto 0);
    trunc_ln24_1_fu_427_p1 <= newCol_fu_417_p2(31 - 1 downto 0);
    trunc_ln24_2_fu_555_p1 <= newCol_1_fu_545_p3(30 - 1 downto 0);
    trunc_ln24_3_fu_541_p1 <= newCol_5_fu_535_p3(30 - 1 downto 0);
    trunc_ln24_fu_423_p1 <= newCol_fu_417_p2(30 - 1 downto 0);
    trunc_ln46_2_fu_631_p1 <= select_ln21_reg_882(30 - 1 downto 0);
    trunc_ln46_fu_449_p1 <= grp_fu_239_p_dout0(30 - 1 downto 0);
    ult43_fu_395_p2 <= "1" when (unsigned(newRow_3_cast4_fu_387_p1) < unsigned(rows)) else "0";
    ult_fu_439_p2 <= "1" when (unsigned(newRow_reg_888) < unsigned(rows)) else "0";
    xor_ln60_fu_457_p2 <= (icmp_ln60_fu_453_p2 xor ap_const_lv1_1);
    xor_ln77_fu_564_p2 <= (icmp_ln77_fu_559_p2 xor ap_const_lv1_1);
    xor_ln87_fu_581_p2 <= (icmp_ln87_fu_577_p2 xor ap_const_lv1_1);
    xor_ln95_fu_608_p2 <= (icmp_ln95_fu_604_p2 xor ap_const_lv1_1);
    zext_ln24_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newCol_1_fu_545_p3),32));
end behav;
